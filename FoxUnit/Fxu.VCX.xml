<?xml version = "1.0" encoding="UTF-8" standalone="yes"?>
<VFPData>
	<record>
		<platform>COMMENT</platform>
		<uniqueid>Class</uniqueid>
		<timestamp>0</timestamp>
		<class/>
		<classloc/>
		<baseclass/>
		<objname/>
		<parent/>
		<properties/>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1>VERSION =   3.00</reserved1>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_19V0PAN25</uniqueid>
		<timestamp>820076039</timestamp>
		<class>form</class>
		<classloc/>
		<baseclass>form</baseclass>
		<objname>fxufrmbase</objname>
		<parent/>
		<properties>DoCreate = .T.
Caption = "Form"
Name = "fxufrmbase"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1>Class</reserved1>
		<reserved2>1</reserved2>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6>Pixels</reserved6>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>COMMENT</platform>
		<uniqueid>RESERVED</uniqueid>
		<timestamp>0</timestamp>
		<class/>
		<classloc/>
		<baseclass/>
		<objname>fxufrmbase</objname>
		<parent/>
		<properties>Arial, 0, 9, 5, 15, 12, 32, 3, 0
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_19V0PCF32</uniqueid>
		<timestamp>822037587</timestamp>
		<class>fxufrmbase</class>
		<classloc>fxu.vcx</classloc>
		<baseclass>form</baseclass>
		<objname>fxufrmtestbroker</objname>
		<parent/>
		<properties>DataSession = 2
Top = 0
Left = 0
Height = 35
Width = 115
DoCreate = .T.
Visible = .F.
Name = "fxufrmtestbroker"
</properties>
		<protected/>
		<methods>PROCEDURE Init
DODEFAULT()

this.DataSessionId = 1
ENDPROC
PROCEDURE runtest
LPARAMETERS tcTestClass, tcTestMethod, toResult, tlAllowDebug

IF !EMPTY(tlAllowDebug)
	tlAllowDebug = .t.
ELSE
	tlAllowDebug = .f.
ENDIF

LOCAL loTestCase, lcTestMethod, lcTestClassProgFile, lcOnError
		


lcTestClassProgFile = tcTestClass + ".prg"
loTestCase = NEWOBJECT(tcTestClass, lcTestClassProgFile,.NULL.,toResult)
loTestCase.ilAllowDebug = tlAllowDebug



loTestCase.Run()

RETURN
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1>Class</reserved1>
		<reserved2>1</reserved2>
		<reserved3>*runtest 
</reserved3>
		<reserved4/>
		<reserved5/>
		<reserved6>Pixels</reserved6>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>COMMENT</platform>
		<uniqueid>RESERVED</uniqueid>
		<timestamp>0</timestamp>
		<class/>
		<classloc/>
		<baseclass/>
		<objname>fxufrmtestbroker</objname>
		<parent/>
		<properties>Arial, 0, 9, 5, 15, 12, 32, 3, 0
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AR134XBE</uniqueid>
		<timestamp>822897166</timestamp>
		<class>fxufrmbase</class>
		<classloc>fxu.vcx</classloc>
		<baseclass>form</baseclass>
		<objname>frmfxunewtestclass</objname>
		<parent/>
		<properties>Height = 154
Width = 649
ShowWindow = 1
DoCreate = .T.
AutoCenter = .T.
Caption = "Select name and location of your new test class"
ControlBox = .T.
Closable = .F.
MaxButton = .F.
MinButton = .F.
Icon = ..\
WindowType = 1
iccurrenttestfolder = 
Name = "frmfxunewtestclass"
</properties>
		<protected/>
		<methods>PROCEDURE cancelaction
thisform.icCurrenttestfolder = ""
thisform.icNewtestclass = ""
pcNewTestClass = ""

thisform.Release()

ENDPROC
PROCEDURE icclassvalidationmessage_assign
LPARAMETERS vNewVal
*To do: Modify this routine for the Assign method
IF EMPTY(vNewVal)
	this.cmdCreate.Enabled = .t.
ELSE
	this.cmdCreate.enabled = .f.
ENDIF


this.label3.Caption = vNewVal
thisform.cmdCreate.Refresh()
thisform.label3.Refresh()
THIS.icclassvalidationmessage = m.vNewVal

ENDPROC
PROCEDURE Init
LPARAMETERS tcCurrentTestFolder

thisform.txtCurrentTestFolder.value = tcCurrentTestFolder
thisform.Icon = "FoxUnit.ico"

thisform.ValidateTestClass()
ENDPROC
PROCEDURE okaction
thisform.icCurrentTestFolder = ADDBS(ALLTRIM(thisform.txtCurrentTestFolder.Value))
thisform.icNewTestClass = ALLTRIM(thisform.txtTestClassName.Value)
pcNewTestClass = ADDBS(thisform.icCurrentTestFolder) + FORCEEXT(thisform.icNewTestClass,".prg")

thisform.Release()

ENDPROC
PROCEDURE validatetestclass
LOCAL lcTestClassFile

lcTestClassFile = ADDBS(ALLTRIM(thisform.txtCurrentTEstFolder.Value)) + ALLTRIM(thisform.txtTestClassName.value) + ".prg"

DO CASE
	CASE EMPTY(ALLTRIM(this.txtTestClassName.Value))
		this.icClassValidationMessage = "Test class name is blank"
	CASE !DIRECTORY(thisform.txtCurrentTestFolder.Value)
		this.icClassValidationMessage = "Directory " + this.txtCurrentTestFolder.value + " does not exist."
	CASE FILE(lcTestClassFile)
		this.icClassValidationMessage = "Test class file already exists."
	OTHERWISE
		this.icClassValidationMessage = ""
ENDCASE

RETURN
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1>Class</reserved1>
		<reserved2>9</reserved2>
		<reserved3>iccurrenttestfolder
icclassvalidationmessage
icnewtestclass
*validatetestclass 
*icclassvalidationmessage_assign 
*cancelaction 
*okaction 
</reserved3>
		<reserved4/>
		<reserved5/>
		<reserved6>Pixels</reserved6>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AW1104JF</uniqueid>
		<timestamp>822897166</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label3</objname>
		<parent>frmfxunewtestclass</parent>
		<properties>Caption = ""
Height = 25
Left = 12
Top = 4
Width = 625
ForeColor = 255,0,0
ZOrderSet = 0
Name = "Label3"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AR134XBE</uniqueid>
		<timestamp>822897166</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label1</objname>
		<parent>frmfxunewtestclass</parent>
		<properties>FontBold = .T.
FontName = "Verdana"
Caption = "Current Test Folder:"
Height = 24
Left = 12
Top = 39
Width = 132
ZOrderSet = 1
Name = "Label1"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AR13CZFD</uniqueid>
		<timestamp>822897166</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdPickTestFolder</objname>
		<parent>frmfxunewtestclass</parent>
		<properties>Top = 35
Left = 612
Height = 25
Width = 24
Caption = "..."
TabIndex = 4
ZOrderSet = 2
Name = "cmdPickTestFolder"
</properties>
		<protected/>
		<methods>PROCEDURE Click
LOCAL lcChangedTestFolder

lcChangedTestFolder = ""

lcChangedTestFolder = GETDIR(thisform.txtCurrentTestFolder.value,"Select test class folder","Select test class folder")

IF DIRECTORY(lcChangedTEstFolder)
	thisform.txtCurrentTestFolder.Value = lcChangedTestFolder
	thisform.Validatetestclass()
	IF !EMPTY(thisform.icClassValidationMessage)
		thisform.txtTestClassName.SetFocus()
	ELSE
		thisform.cmdCreate.SetFocus()
	ENDIF
	
ENDIF


ENDPROC
PROCEDURE LostFocus
IF !EMPTY(thisform.icclassvalidationmessage)
	thisform.txtTestClassName.SetFocus()
ELSE
	thisform.cmdCreate.SetFocus()
ENDIF

ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AR13CZFE</uniqueid>
		<timestamp>822897166</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label2</objname>
		<parent>frmfxunewtestclass</parent>
		<properties>FontBold = .T.
FontName = "Verdana"
Caption = "Test Class/File Name:"
Height = 24
Left = 12
Top = 71
Width = 156
ZOrderSet = 3
Name = "Label2"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AR134XBE</uniqueid>
		<timestamp>822897166</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdCreate</objname>
		<parent>frmfxunewtestclass</parent>
		<properties>Top = 103
Left = 456
Height = 39
Width = 84
Picture = ("FXUFormClose.BMP")
Caption = "\&lt;OK"
Default = .T.
Enabled = .F.
TabIndex = 2
ZOrderSet = 4
Name = "cmdCreate"
</properties>
		<protected/>
		<methods>PROCEDURE Click
thisform.OKAction()



*	thisform.icCurrentTestFolder = ADDBS(ALLTRIM(thisform.txtCurrentTestFolder.Value))
*	thisform.icNewTestClass = ALLTRIM(thisform.txtTestClassName.Value)
*	pcNewTestClass = ADDBS(thisform.icCurrentTestFolder) + FORCEEXT(thisform.icNewTestClass,".prg")

*	thisform.Release

ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AR13F54X</uniqueid>
		<timestamp>822897166</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdCancel</objname>
		<parent>frmfxunewtestclass</parent>
		<properties>Top = 103
Left = 552
Height = 39
Width = 84
Picture = ("FXUCancel.BMP")
Cancel = .T.
Caption = "\&lt;Cancel"
TabIndex = 3
ZOrderSet = 5
Name = "cmdCancel"
</properties>
		<protected/>
		<methods>PROCEDURE Click
thisform.CancelAction()

ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>822625306</timestamp>
		<class>textbox</class>
		<classloc/>
		<baseclass>textbox</baseclass>
		<objname>txtCurrentTestFolder</objname>
		<parent>frmfxunewtestclass</parent>
		<properties>ControlSource = ""
Height = 25
Left = 168
ReadOnly = .T.
Top = 35
Width = 445
ZOrderSet = 6
Name = "txtCurrentTestFolder"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AS0GD6VV</uniqueid>
		<timestamp>822897166</timestamp>
		<class>textbox</class>
		<classloc/>
		<baseclass>textbox</baseclass>
		<objname>txtTestClassName</objname>
		<parent>frmfxunewtestclass</parent>
		<properties>Height = 25
Left = 168
TabIndex = 1
Top = 65
Width = 468
ZOrderSet = 7
Name = "txtTestClassName"
</properties>
		<protected/>
		<methods>PROCEDURE Init
this.SetFocus()

ENDPROC
PROCEDURE InteractiveChange
thisform.ValidateTestClass()
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>COMMENT</platform>
		<uniqueid>RESERVED</uniqueid>
		<timestamp>0</timestamp>
		<class/>
		<classloc/>
		<baseclass/>
		<objname>frmfxunewtestclass</objname>
		<parent/>
		<properties>Arial, 0, 9, 5, 15, 12, 32, 3, 0
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1GK153VAC</uniqueid>
		<timestamp>845905063</timestamp>
		<class>fxufrmbase</class>
		<classloc>fxu.vcx</classloc>
		<baseclass>form</baseclass>
		<objname>fxufrmloadclass</objname>
		<parent/>
		<properties>Height = 397
Width = 408
DoCreate = .T.
AutoCenter = .T.
Caption = "Load Class"
ControlBox = .T.
Closable = .F.
MaxButton = .F.
MinButton = .F.
Icon = (("FoxUnit.ico"))
WindowType = 1
ilcancel = .F.
icfxudefaulttestdirectory = .F.
icfxuselectedtestdirectory = 
Name = "fxufrmloadclass"
</properties>
		<protected>icfxudefaulttestdirectory
</protected>
		<methods>PROCEDURE cancelaction
thisform.ilCancel = .T.
thisform.Hide()


ENDPROC
PROCEDURE gettestcases
LOCAL llFXUinSetProcedure, lnPrgCount

LOCAL ARRAY laTestCases[1]
LOCAL ARRAY laOldTestCases[1]

llFXUinSetProcedure = 'FXU.PRG' $ SET("Procedure")

IF NOT llFXUinSetProcedure
SET PROCEDURE TO FXU.PRG ADDITIVE
ENDIF

ThisForm.SetTestCasesOnlyState()


SELECT distinct tclass FROM fxuresults INTO ARRAY laOldTestCases

WITH thisform
DO CASE
CASE .chkNewTestCases.value AND .chkTestCasesOnly.value
*
* List only New Test Cases
*
lnPrgCount = getArrayOfNewTestCases(@laTestCases, @laOldTestCases, ThisForm.icFxuSelectedTestDirectory)
CASE .ChkTestCasesOnly.value
*
* List only Test Cases
*
lnPrgCount = getArrayOfTestCases(@laTestCases, ThisForm.icFxuSelectedTestDirectory)
CASE .chkNewTestCases.value
*
* List only New Programs
*
lnPrgCount = getArrayOfNewProgramFiles(@laTestCases, @laOldTestCases, ThisForm.icFxuSelectedTestDirectory)
OTHERWISE
*
* List All Programs
*
lnPrgCount = getArrayOfProgramFiles(@laTestCases,ThisForm.icFxuSelectedTestDirectory)
ENDCASE

DIMENSION .iafiles[1]
IF ALEN(laTestCases,1) &gt; 1 AND ;
TYPE('laTestCases[1,1]') = 'C'

ACOPY(laTestCases, .iaFiles)
.cmdLoad.Enabled = .T.

ELSE
.iaFiles[1] = "No Test Cases Found"
.cmdLoad.Enabled = .F.
ENDIF
ENDWITH
thisform.lstFiles.Requery()
RELEASE laOldTestCases
RELEASE laTestCases
IF NOT llFXUinSetProcedure
RELEASE PROCEDURE FXU.PRG
ENDIF

ENDPROC
PROCEDURE Init
thisform.icFxuDefaultTestDirectory = ADDBS(JUSTPATH(FULLPATH("FXUResults.DBF")))


thisform.icFxuSelectedTestDirectory = thisform.icFxuDefaultTestDirectory
thisform.getTestCases()

ENDPROC
PROCEDURE okaction
thisform.ilCancel = .F.
thisform.Hide()

ENDPROC
PROCEDURE selectall
LPARAMETERS tlSelect

LOCAL lnX

IF EMPTY(tlSelect)
	tlSelect = .f.
ELSE
	tlSelect = .t.
ENDIF

FOR lnX = 1 TO ThisForm.lstFiles.ListCount

	ThisForm.lstFiles.Selected(lnX) = tlSelect

ENDFOR
ENDPROC
PROCEDURE selectalternatetestfolder
LOCAL lcSelectedTestDirectory

lcSelectedTestDirectory = GETDIR(this.icFxuDefaultTestDirectory, "Select Test Folder", "Select Test Folder")

IF DIRECTORY(lcSelectedTestDirectory)
	ThisForm.icFxuSelectedTestDirectory = lcSelectedTestDirectory
	this.GetTestCases()
ENDIF
ENDPROC
PROCEDURE settestcasesonlystate
IF !UPPER( ThisForm.icFxuSelectedTestDirectory ) == UPPER( this.icFxuDefaultTestDirectory )

	ThisForm.chkTestCasesOnly.Value = .t.
	ThisForm.chkTestCasesOnly.Enabled = .f.
	
ELSE

	ThisForm.chkTestCasesOnly.Enabled = .t.
	
ENDIF

ThisForm.chkTestCasesOnly.Refresh()
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1>Class</reserved1>
		<reserved2>9</reserved2>
		<reserved3>ilcancel
icfxudefaulttestdirectory
icfxuselectedtestdirectory
^iafiles[1,0] 
*okaction 
*cancelaction 
*gettestcases 
*selectall 
*settestcasesonlystate 
*selectalternatetestfolder 
</reserved3>
		<reserved4/>
		<reserved5/>
		<reserved6>Pixels</reserved6>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1GK155ZJK</uniqueid>
		<timestamp>845394186</timestamp>
		<class>listbox</class>
		<classloc/>
		<baseclass>listbox</baseclass>
		<objname>lstFiles</objname>
		<parent>fxufrmloadclass</parent>
		<properties>RowSourceType = 5
RowSource = "thisform.iaFiles"
Height = 333
Left = 8
MultiSelect = .T.
Top = 12
Width = 293
Name = "lstFiles"
</properties>
		<protected/>
		<methods>PROCEDURE DblClick
thisform.OkAction()
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>845394186</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdLoad</objname>
		<parent>fxufrmloadclass</parent>
		<properties>Top = 236
Left = 316
Height = 48
Width = 84
Picture = (("fxuclassload.bmp"))
Caption = "\&lt;Load"
Default = .F.
Name = "cmdLoad"
</properties>
		<protected/>
		<methods>PROCEDURE Click
thisform.okAction()

ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1GK155ZJO</uniqueid>
		<timestamp>845394186</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdCancel</objname>
		<parent>fxufrmloadclass</parent>
		<properties>Top = 297
Left = 316
Height = 48
Width = 84
Picture = ('fxucancel.bmp')
Cancel = .T.
Caption = "\&lt;Cancel"
Name = "cmdCancel"
</properties>
		<protected/>
		<methods>PROCEDURE Click
thisform.cancelaction()
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1GL0XHXLB</uniqueid>
		<timestamp>845905063</timestamp>
		<class>checkbox</class>
		<classloc/>
		<baseclass>checkbox</baseclass>
		<objname>chkTestCasesOnly</objname>
		<parent>fxufrmloadclass</parent>
		<properties>Top = 354
Left = 8
Height = 17
Width = 112
Alignment = 0
Caption = "Test Cases Only"
Value = .T.
ToolTipText = "Only list programs that are a test case class."
Name = "chkTestCasesOnly"
</properties>
		<protected/>
		<methods>PROCEDURE Click
thisform.getTestCases()
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1GL0XHXLD</uniqueid>
		<timestamp>845905063</timestamp>
		<class>checkbox</class>
		<classloc/>
		<baseclass>checkbox</baseclass>
		<objname>chkNewTestCases</objname>
		<parent>fxufrmloadclass</parent>
		<properties>Top = 375
Left = 8
Height = 17
Width = 116
Alignment = 0
Caption = "New Test Cases"
Value = .T.
ToolTipText = "Only list test cases that are not already in FoxUnit."
Name = "chkNewTestCases"
</properties>
		<protected/>
		<methods>PROCEDURE Click
thisform.getTestCases()
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1GO1EDP45</uniqueid>
		<timestamp>845394186</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdBrowse</objname>
		<parent>fxufrmloadclass</parent>
		<properties>Top = 171
Left = 316
Height = 48
Width = 84
Picture = (("fxubrowseforfolder.bmp"))
Caption = "\&lt;Browse"
Default = .F.
Name = "cmdBrowse"
</properties>
		<protected/>
		<methods>PROCEDURE Click
ThisForm.SelectAlternateTestFolder()

ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>845394186</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdDeselectAll</objname>
		<parent>fxufrmloadclass</parent>
		<properties>Top = 108
Left = 317
Height = 48
Width = 84
Picture = (("fxuselectnone.bmp"))
Caption = "\&lt;Deselect All"
Default = .F.
Name = "cmdDeselectAll"
</properties>
		<protected/>
		<methods>PROCEDURE Click
ThisForm.SelectAll(.f.)
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1GO1EDP4P</uniqueid>
		<timestamp>845394186</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdSelectAll</objname>
		<parent>fxufrmloadclass</parent>
		<properties>Top = 48
Left = 319
Height = 48
Width = 84
Picture = (("fxuselectall.bmp"))
Caption = "\&lt;Select All"
Default = .T.
Name = "cmdSelectAll"
</properties>
		<protected/>
		<methods>PROCEDURE Click
thisform.SelectAll(.t.)
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>COMMENT</platform>
		<uniqueid>RESERVED</uniqueid>
		<timestamp>0</timestamp>
		<class/>
		<classloc/>
		<baseclass/>
		<objname>fxufrmloadclass</objname>
		<parent/>
		<properties>Arial, 0, 9, 5, 15, 12, 32, 3, 0
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1A00BASP9</uniqueid>
		<timestamp>845957839</timestamp>
		<class>form</class>
		<classloc/>
		<baseclass>form</baseclass>
		<objname>frmoptions</objname>
		<parent/>
		<properties>Height = 421
Width = 664
ShowWindow = 1
DoCreate = .T.
ShowTips = .T.
AutoCenter = .T.
Caption = "Customize FoxUnit options"
MaxButton = .F.
MinButton = .F.
Icon = ("foxunit.ico")
WindowType = 1
AllowOutput = .F.
_memberdata = 
iomainform = .NULL.
Name = "frmoptions"
</properties>
		<protected/>
		<methods>PROCEDURE Destroy
THIS.ioMainForm = .NULL.

ENDPROC
PROCEDURE GotFocus
KEYBOARD '{TAB}' PLAIN CLEAR
ENDPROC
PROCEDURE Init
this.ilInitialHonorTestPrefix = this.ioMainForm.ilHonorTestPrefix
ENDPROC
PROCEDURE Load
*
*  store an object reference to the main calling
*  FoxUnit form, which calls this form
*
THIS.ioMainForm = _Screen.ActiveForm

ENDPROC
PROCEDURE okaction
* Debugger page options
THISFORM.ioMainForm.ilCloseDebuggerAtEndOfTestsRun = ;
	this.pgfOptions.Page1.chkCloseDebuggerAfterTestsRun.Value
THISFORM.ioMainForm.ilAllowDebug = THIS.pgfOptions.Page1.chkAllowDebug.Value

* Interface page options
THISFORM.ioMainForm.ShowTips = THIS.pgfOptions.Page2.chkShowTips.Value
thisform.ioMainForm.ilHonorTestPrefix = this.pgfOptions.Page2.chkHonorTestPrefix.value
thisform.ioMainForm.ilReloadTestsOnRun = this.pgfOptions.Page2.chkReloadAll.Value

* If we've changed the value of ilHonorTestPrefix,
* we need to reload all test case classes
IF thisform.ioMainForm.ilHonorTestPrefix != thisform.ilInitialhonortestprefix
	thisform.ioMainForm.ioResultData.ReloadTestCaseClasses()
ENDIF




ENDPROC
PROCEDURE zreadme
#IF .f.

Class:  FXU.VCX/frmOptions

#ENDIF
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1>Class</reserved1>
		<reserved2>36</reserved2>
		<reserved3>_memberdata XML Metadata for customizable properties
iomainform
ilinitialhonortestprefix
*zreadme 
*okaction 
</reserved3>
		<reserved4/>
		<reserved5/>
		<reserved6>Pixels</reserved6>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>845957839</timestamp>
		<class>pageframe</class>
		<classloc/>
		<baseclass>pageframe</baseclass>
		<objname>pgfOptions</objname>
		<parent>frmoptions</parent>
		<properties>ErasePage = .T.
PageCount = 2
Top = 8
Left = 8
Width = 652
Height = 352
Themes = .F.
Name = "pgfOptions"
Page1.Caption = "Debugging"
Page1.Name = "Page1"
Page2.Caption = "Interface"
Page2.Name = "Page2"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AL14KQ18</uniqueid>
		<timestamp>845957839</timestamp>
		<class>shape</class>
		<classloc/>
		<baseclass>shape</baseclass>
		<objname>Shape2</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>Top = 101
Left = 363
Height = 157
Width = 225
BackColor = 255,255,255
BorderColor = 255,255,255
Name = "Shape2"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>845957839</timestamp>
		<class>shape</class>
		<classloc/>
		<baseclass>shape</baseclass>
		<objname>Shape1</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>Top = 101
Left = 55
Height = 157
Width = 225
BackColor = 255,255,255
BorderColor = 255,255,255
Name = "Shape1"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>845957839</timestamp>
		<class>checkbox</class>
		<classloc/>
		<baseclass>checkbox</baseclass>
		<objname>chkAllowDebug</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>Top = 25
Left = 15
Height = 17
Width = 576
Alignment = 0
BackStyle = 0
Caption = "Exclude the Setup() and TearDown() methods from the TRY..CATCH block in which each test executes"
Name = "chkAllowDebug"
</properties>
		<protected/>
		<methods>PROCEDURE Init
THIS.Value = THISFORM.ioMainForm.ilAllowDebug
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0Z07LD</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label1</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>WordWrap = .T.
BackStyle = 0
Caption = "As shown on the left, the default FoxUnit behavior is to execute any explicit Setup() code for the test class, run the test, then execute any explicit TearDown() code for that test class -- all within the TRY..CATCH block."
Height = 32
Left = 15
Top = 49
Width = 616
Name = "Label1"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label2</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "TRY"
Height = 16
Left = 71
Top = 105
Width = 168
Name = "Label2"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0Z07LD</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label3</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "THIS.Setup()"
Height = 16
Left = 79
Top = 117
Width = 168
Name = "Label3"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_RBT0V74R7</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label4</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "THIS.RunTest()"
Height = 16
Left = 79
Top = 129
Width = 168
Name = "Label4"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_RBT0V74R7</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label5</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "CATCH TO loEx"
Height = 16
Left = 71
Top = 141
Width = 168
Name = "Label5"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>RESERVED</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label6</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "THIS.HandleException(...)"
Height = 16
Left = 79
Top = 153
Width = 176
Name = "Label6"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_19V0PAN25</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label7</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "ENDTRY"
Height = 16
Left = 71
Top = 237
Width = 176
Name = "Label7"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>RESERVED</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label8</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "TRY"
Height = 16
Left = 79
Top = 177
Width = 168
Name = "Label8"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_19V0PCF32</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label9</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "THIS.TearDown()"
Height = 16
Left = 87
Top = 189
Width = 168
Name = "Label9"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>RESERVED</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label10</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "FINALLY"
Height = 16
Left = 71
Top = 165
Width = 168
Name = "Label10"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1A00BASP9</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label11</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "CATCH TO loEx"
Height = 16
Left = 79
Top = 201
Width = 168
Name = "Label11"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label12</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "THIS.HandleException(...)"
Height = 16
Left = 87
Top = 213
Width = 176
Name = "Label12"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1A00BQSVT</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label13</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "ENDTRY"
Height = 16
Left = 79
Top = 225
Width = 176
Name = "Label13"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label14</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontItalic = .T.
BackStyle = 0
Caption = "Errors in Setup() and TearDown() methods are handled -- no native VFP Cancel/Ignore/Suspend dialog."
Height = 16
Left = 15
Top = 81
Width = 588
Name = "Label14"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AL147L2T</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label15</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>WordWrap = .T.
BackStyle = 0
Caption = "As shown on the right, if you select the checkbox above, there is no TRY..CATCH exception handling for the Setup() and TearDown() code."
Height = 32
Left = 15
Top = 261
Width = 620
Name = "Label15"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AL14EE7J</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label16</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontItalic = .T.
BackStyle = 0
Caption = "Errors in Setup() and TearDown() methods invoked the native VFP Cancel/Ignore/Suspend dialog."
Height = 16
Left = 15
Top = 293
Width = 556
Name = "Label16"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AL14EE7K</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label17</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "TRY"
Height = 16
Left = 379
Top = 125
Width = 168
Name = "Label17"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AL14EE7M</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label18</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "THIS.Setup()"
Height = 16
Left = 379
Top = 105
Width = 168
Name = "Label18"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AL14EE7N</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label19</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "THIS.RunTest()"
Height = 16
Left = 387
Top = 137
Width = 168
Name = "Label19"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AL14EE7P</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label20</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "CATCH TO loEx"
Height = 16
Left = 379
Top = 149
Width = 168
Name = "Label20"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AL14EE7Q</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label21</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "THIS.HandleException(...)"
Height = 16
Left = 387
Top = 161
Width = 176
Name = "Label21"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AL14EE7S</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label22</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "ENDTRY"
Height = 16
Left = 379
Top = 173
Width = 176
Name = "Label22"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AL14EE7V</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label24</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontName = "Courier New"
BackStyle = 0
Caption = "THIS.TearDown()"
Height = 16
Left = 379
Top = 193
Width = 168
Name = "Label24"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AL14I4Z3</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label23</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>FontItalic = .T.
WordWrap = .T.
BackStyle = 0
Caption = "(This is the behavior you get if you select the above checkbox)"
Height = 32
Left = 387
Top = 217
Width = 180
Name = "Label23"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1BW0R04OL</uniqueid>
		<timestamp>845957839</timestamp>
		<class>checkbox</class>
		<classloc/>
		<baseclass>checkbox</baseclass>
		<objname>chkCloseDebuggerAfterTestsRun</objname>
		<parent>frmoptions.pgfOptions.Page1</parent>
		<properties>Top = 5
Left = 15
Height = 17
Width = 576
Alignment = 0
BackStyle = 0
Caption = "Automatically close the debugger at completion of test suite run (all, class or selected)"
Value = .F.
ToolTipText = "If left unchecked, all class methods not implemented in the superclass of the test class will be loaded and run as tests. For a more detailed explanation, read the comments on icTestPrefix in FxuTestCaseTemplate.txt"
Name = "chkCloseDebuggerAfterTestsRun"
</properties>
		<protected/>
		<methods>PROCEDURE Init
THIS.Value = THISFORM.ioMainForm.ilCloseDebuggerAtEndOfTestsRun
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>845957839</timestamp>
		<class>checkbox</class>
		<classloc/>
		<baseclass>checkbox</baseclass>
		<objname>chkShowTips</objname>
		<parent>frmoptions.pgfOptions.Page2</parent>
		<properties>Top = 24
Left = 31
Height = 17
Width = 428
Alignment = 0
BackStyle = 0
Caption = "Show ToolTipText in the main FoxUnit form (set its ShowTips property to .t.)"
Value = .T.
Name = "chkShowTips"
</properties>
		<protected/>
		<methods>PROCEDURE Init
THIS.Value = THISFORM.ioMainForm.ShowTips
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>845957839</timestamp>
		<class>checkbox</class>
		<classloc/>
		<baseclass>checkbox</baseclass>
		<objname>chkReloadAll</objname>
		<parent>frmoptions.pgfOptions.Page2</parent>
		<properties>Top = 43
Left = 31
Height = 17
Width = 428
Alignment = 0
BackStyle = 0
Caption = "Reload all test classes involved in a test run every time tests are run"
Value = .F.
ToolTipText = "This will mean a performance hit each time tests are run, and could also affect cursor positioning in the grid, however if you modify tests outside of the buttons provided by the FoxUnit form, this may be a wise choice."
Name = "chkReloadAll"
</properties>
		<protected/>
		<methods>PROCEDURE Init
THIS.Value = THISFORM.ioMainForm.ilReloadTestsOnRun
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>845957839</timestamp>
		<class>checkbox</class>
		<classloc/>
		<baseclass>checkbox</baseclass>
		<objname>chkHonorTestPrefix</objname>
		<parent>frmoptions.pgfOptions.Page2</parent>
		<properties>Top = 62
Left = 31
Height = 17
Width = 428
Alignment = 0
BackStyle = 0
Caption = "Load and run only tests with the specified icTestPrefix value in test classes"
Value = .T.
ToolTipText = "If left unchecked, all class methods not implemented in the superclass of the test class will be loaded and run as tests. For a more detailed explanation, read the comments on icTestPrefix in FxuTestCaseTemplate.txt"
Name = "chkHonorTestPrefix"
</properties>
		<protected/>
		<methods>PROCEDURE Init
THIS.Value = THISFORM.ioMainForm.ilHonorTestPrefix
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>824992903</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdCancel</objname>
		<parent>frmoptions</parent>
		<properties>Top = 371
Left = 572
Height = 39
Width = 84
FontName = "Tahoma"
Picture = ("FXUCancel.BMP")
Cancel = .T.
Caption = "\&lt;Cancel"
TabIndex = 5
ToolTipText = "Click here to cancel the changes you have made here"
Name = "cmdCancel"
</properties>
		<protected/>
		<methods>PROCEDURE Click
THISFORM.Release()
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AL12AW7M</uniqueid>
		<timestamp>824992903</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdOK</objname>
		<parent>frmoptions</parent>
		<properties>Top = 371
Left = 476
Height = 39
Width = 84
FontName = "Tahoma"
Picture = ("FXUFormClose.BMP")
Caption = "\&lt;OK"
Default = .T.
TabIndex = 5
ToolTipText = "Click here to make permanent the settings you update here"
Name = "cmdOK"
</properties>
		<protected/>
		<methods>PROCEDURE Click
THISFORM.OKAction()
THISFORM.Release()
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1AL14NOXM</uniqueid>
		<timestamp>845957839</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>Label1</objname>
		<parent>frmoptions</parent>
		<properties>WordWrap = .T.
BackStyle = 0
Caption = "Select OK to make permanent any changes you make here.  The settings are peristed in FXUPersist.XML, located in the same folder as the FXUResults.DBF"
Height = 32
Left = 20
Top = 375
Width = 432
Name = "Label1"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>COMMENT</platform>
		<uniqueid>RESERVED</uniqueid>
		<timestamp>0</timestamp>
		<class/>
		<classloc/>
		<baseclass/>
		<objname>frmoptions</objname>
		<parent/>
		<properties>Arial, 0, 9, 5, 15, 12, 32, 3, 0
Tahoma, 0, 9, 5, 14, 12, 23, 2, 0
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1A00BASP9</uniqueid>
		<timestamp>846094120</timestamp>
		<class>form</class>
		<classloc/>
		<baseclass>form</baseclass>
		<objname>frmgettestclasstemplate</objname>
		<parent/>
		<properties>Height = 440
Width = 640
ShowWindow = 1
ShowInTaskBar = .F.
DoCreate = .T.
ShowTips = .T.
AutoCenter = .T.
Caption = "Specify the FoxUnit test class template "
MaxButton = .F.
MinButton = .F.
Icon = ("foxunit.ico")
WindowType = 1
AllowOutput = .F.
_memberdata = 
iuretval = .NULL.
inpermanenttemplates = 0
Name = "frmgettestclasstemplate"
</properties>
		<protected/>
		<methods>PROCEDURE addtemplate
*
*  called from THIS.lstTemplates.RightClick()
*  and from THIS.GetYourFXUTemplate()
*
LPARAMETERS tcFileName

LOCAL lcFileName, xx, lcDescription, lnRow, yy, llAlready

IF PCOUNT() = 0
lcFileName = GETFILE("TXT","FoxUnit template","Select",0,"Select a FoxUnit test class .TXT template")
ELSE
lcFileName = m.tcFileName
ENDIF
IF EMPTY(m.lcFileName)
RETURN
ENDIF

lcFileName = UPPER(ALLTRIM(m.lcFileName))

FOR xx = 1 TO ALEN(THIS.iaTemplates,1)
IF UPPER(ALLTRIM(THIS.iaTemplates[m.xx,3])) == m.lcFileName
llAlready = .t.
EXIT
ENDIF
ENDFOR
IF m.llAlready
MESSAGEBOX(m.lcFileName + " is already in the list!", ;
16, ;
"Please Note")
RETURN
ENDIF

IF NOT THIS.ValidTemplateFile(m.lcFileName)
MESSAGEBOX(JUSTFNAME(m.lcFileName) + ;
" is not a FoxUnit test case class inheriting from FXUTestCase.PRG", ;
48, ;
"Please Note")
RETURN
ENDIF

IF PCOUNT() = 0
lcDescription = INPUTBOX("Description", ;
"Enter a short description")
ENDIF
IF EMPTY(m.lcDescription)
lcDescription = "Custom FoxUnit template"
ENDIF

*
*  add it
*
lnRow = ALEN(THIS.iaTemplates,1)+1
DIMENSION THIS.iaTemplates[m.lnRow,ALEN(THIS.iaTemplates,2)]
THIS.iaTemplates[m.lnRow,1] = m.lcDescription
THIS.iaTemplates[m.lnRow,2] = JUSTFNAME(m.lcFileName)
THIS.iaTemplates[m.lnRow,3] = m.lcFileName

THIS.SortOptionalTemplates()

THIS.lstTemplates.Value = m.lnRow
THIS.lstTemplates.RowSource = THIS.lstTemplates.RowSource





ENDPROC
PROCEDURE addvmptemplates
*
*  FXU.VCX/frmGetTestClassTemplate::AddVMPTemplates()
*
*
*  add VMP-specific (Visual MaxFrame Professional) templates
*
IF NOT FILE("XXFW.VCX")
RETURN
ENDIF

LOCAL lnRow, lnCols, lcCurDir, lcXLIB, laFiles[1], lnFiles, xx, ;
lcFileName, lcDesc, lcDescText, laLines[1]
lnRow = ALEN(THIS.iaTemplates,1)
lnCols = ALEN(THIS.iaTemplates,2)
lcCurDir = FULLPATH(CURDIR())
lcXLIB = JUSTPATH(FULLPATH("XXFW.VCX"))

CD (m.lcXLIB)

lnFiles = ADIR(laFiles,"VMPFXU*.TXT")

CD (m.lcCurDir)

IF m.lnFiles = 0
RETURN
ENDIF

FOR xx = 1 TO m.lnFiles
lcFileName = UPPER(laFiles[m.xx,1])
IF NOT "TEMPLATE" $ m.lcFileName
LOOP
ENDIF
IF ASCAN(THIS.iaTemplates,m.lcFileName,-1,-1,2,15)&gt;0
*  already in the list
LOOP
ENDIF
lnRow = m.lnRow + 1
DIMENSION THIS.iaTemplates[m.lnRow,m.lnCols]
ALINES(laLines,FILETOSTR(m.lcFileName))
lcDescText = laLines[2]   &amp;&amp;&amp; description is on the 2nd line of the .TXT template file
lcDescText = ALLTRIM(SUBSTRC(m.lcDescText,2))   &amp;&amp;&amp; remove leading asterisk

*!*	  DO CASE
*!*	    CASE RIGHTC(m.lcFileName,7) = "_DS.TXT"
*!*	      lcDescText = "VMP DataSource test case template"
*!*	    CASE RIGHTC(m.lcFileName,7) = "_BO.TXT"
*!*	      lcDescText = "VMP Business Object test case template"
*!*	    CASE RIGHTC(m.lcFileName,16) = "_BO_ONE2MANY.TXT"
*!*	      lcDescText = "VMP One2Many Business Object test case template"
*!*	    CASE RIGHTC(m.lcFileName,21) = "_BO_ONE2MANY2MANY.TXT"
*!*	      lcDescText = "VMP One2Many2Many Business Object test case template"
*!*	    OTHERWISE
*!*	      lcDescText = "VMP test case template"
*!*	  ENDCASE

THIS.iaTemplates[m.lnRow,1] = m.lcDescText
THIS.iaTemplates[m.lnRow,2] = laFiles[m.xx,1]
THIS.iaTemplates[m.lnRow,3] = FULLPATH(m.lcFileName)
THIS.iaTemplates[m.lnRow,4] = .t.   &amp;&amp;&amp; permanent
ENDFOR



*!*	IF FILE("VMPFXUTestCaseTemplate_DS.TXT") ;
*!*	     AND NOT ASCAN(THIS.iaTemplates,"VMPFXUTestCaseTemplate_DS.TXT",-1,-1,2,15)&gt;0
*!*	  lnRow = m.lnRow + 1
*!*	  DIMENSION THIS.iaTemplates[m.lnRow,m.lnCols]
*!*	  THIS.iaTemplates[m.lnRow,1] = "VMP DataSource test case template"
*!*	  THIS.iaTemplates[m.lnRow,2] = "VMPFXUTestCaseTemplate_DS.TXT"
*!*	  THIS.iaTemplates[m.lnRow,3] = FULLPATH(THIS.iaTemplates[m.lnRow,2])
*!*	  THIS.iaTemplates[m.lnRow,4] = .t.   &amp;&amp;&amp; permanent
*!*	ENDIF

*!*	IF FILE("VMPFXUTestCaseTemplate_BO.TXT") ;
*!*	     AND NOT ASCAN(THIS.iaTemplates,"VMPFXUTestCaseTemplate_BO.TXT",-1,-1,2,15)&gt;0
*!*	  lnRow = m.lnRow + 1
*!*	  DIMENSION THIS.iaTemplates[m.lnRow,m.lnCols]
*!*	  THIS.iaTemplates[m.lnRow,1] = "VMP Business Object test case template"
*!*	  THIS.iaTemplates[m.lnRow,2] = "VMPFXUTestCaseTemplate_BO.TXT"
*!*	  THIS.iaTemplates[m.lnRow,3] = FULLPATH(THIS.iaTemplates[m.lnRow,2])
*!*	  THIS.iaTemplates[m.lnRow,4] = .t.   &amp;&amp;&amp; permanent
*!*	ENDIF

*!*	IF FILE("VMPFXUTestCaseTemplate_BO_One2Many.TXT") ;
*!*	     AND NOT ASCAN(THIS.iaTemplates,"VMPFXUTestCaseTemplate_BO_One2Many.TXT",-1,-1,2,15)&gt;0
*!*	  lnRow = m.lnRow + 1
*!*	  DIMENSION THIS.iaTemplates[m.lnRow,m.lnCols]
*!*	  THIS.iaTemplates[m.lnRow,1] = "VMP One2Many Business Object test case template"
*!*	  THIS.iaTemplates[m.lnRow,2] = "VMPFXUTestCaseTemplate_BO_One2Many.TXT"
*!*	  THIS.iaTemplates[m.lnRow,3] = FULLPATH(THIS.iaTemplates[m.lnRow,2])
*!*	  THIS.iaTemplates[m.lnRow,4] = .t.   &amp;&amp;&amp; permanent
*!*	ENDIF

THIS.lstTemplates.RowSource = THIS.lstTemplates.RowSource

ENDPROC
PROCEDURE Destroy
THIS.SaveSettings()

ENDPROC
PROCEDURE getyourfxutemplate
*
*  called from THIS.cmdSelectCustomTemplate.Click()
*


LOCAL lcFileName, xx, llAlready

lcFileName = GETFILE("TXT","FoxUnit template","Select",0,"Select a FoxUnit test class .TXT template")

IF EMPTY(m.lcFileName)
RETURN
ENDIF

IF NOT THIS.ValidTemplateFile(m.lcFileName)
IF MESSAGEBOX(JUSTFNAME(m.lcFileName) + ;
" is not a FoxUnit test case class inheriting from FXUTestCase.PRG." + ;
CHR(10) + "Do you wish to load this test case template anyway?", ;
4+48,  ;
"Please Note") = 7
	RETURN
ENDIF
ENDIF

*
*  if the selected template isn't already in the list,
*  put it in the list so it's there from now on
*
FOR xx = 1 TO ALEN(THIS.iaTemplates,1)
IF UPPER(ALLTRIM(THIS.iaTemplates[m.xx,3])) == m.lcFileName
llAlready = .t.
EXIT
ENDIF
ENDFOR

IF m.llAlready
RETURN m.lcFileName
ENDIF

THIS.AddTemplate(m.lcFileName)

RETURN m.lcFileName

ENDPROC
PROCEDURE getyourfxutesttocopy
*
*  called from THIS.cmdCopyExistingPRG.Click()
*

LOCAL lcFileName, xx, llAlready

lcFileName = GETFILE("PRG","FoxUnit test class","Select",0,"Select an existing FoxUnit test class .PRG")

IF EMPTY(m.lcFileName)
RETURN
ENDIF

IF NOT THIS.ValidTemplateFile(m.lcFileName)
MESSAGEBOX(JUSTFNAME(m.lcFileName) + ;
" is not a FoxUnit test case class inheriting from FXUTestCase.PRG", ;
48, ;
"Please Note")
RETURN
ENDIF

RETURN m.lcFileName

ENDPROC
PROCEDURE Init
*
*    tcNewTestClass (R) The filename of the new test class
*                       .PRG to be created here
*
*  tcResultVariable (R) The name of the private (or public) variable
*                       that has already been declared and
*                       initialized in the calling code -- it
*                       will be updated here to either
*                                  .NULL. - the user &lt;Cancel&gt;led from here
*                       Fullpath+FileName - the user made a valid selection here
*
LPARAMETERS tcNewTestClass, tcResultVariable

THIS.icNewTestClass = m.tcNewTestClass
THIS.icResultVariable = m.tcResultVariable

THIS.MinHeight = THIS.Height
THIS.MinWidth = THIS.Width

IF VERSION(5) &lt; 900
THIS.BorderStyle = 2
ENDIF

THIS.RestoreSettings()

THIS.RemoveMissingTemplates()

THIS.AddVMPTemplates()

*
*  if you subclass this form, you can add code here
*  to add your own custom templates
*
THIS.AddCustomTemplates()





ENDPROC
PROCEDURE Load
*
*  grab these settings from the calling FXU.VCX/frmFoxUnit form
*

THIS.AddProperty("icPersistFile",SPACE(0))
THIS.AddProperty("icUserID",SPACE(0))

IF TYPE("_Screen.ActiveForm.icPersistFile") = "C" ;
AND NOT EMPTY(_Screen.ActiveForm.icPersistFile)

*
*  this should always be true, because this dialog
*  is expected to only be called from the main
*  FXU.VCX/frmFoxUnit form
*

THIS.icPersistFile = ;
ADDBS(JUSTPATH(_Screen.ActiveForm.icPersistFile)) + ;
"FXUPersistGetTemplate.XML"

THIS.icUserID = _Screen.ActiveForm.icUserID

ELSE
*
*  this should never really happen, except perhaps
*  for when Drew is testing standalone
*

THIS.icPersistFile = ADDBS(JUSTPATH(FULLPATH("FXUResults.DBF"))) + ;
"FXUPersistGetTemplate.XML"

THIS.icUserID = ALLTRIM(TRANSFORM(SYS(0)))
IF LENC(THIS.icUserID) &lt; 15 OR NOT "#" $ THIS.icUserID
*  machine information not assigned by the network,
*  or network shell not loaded, or standalone machine
THIS.icUserID = SPACE(0)
ELSE
THIS.icUserID = ALLTRIM(SUBSTRC(THIS.icUserID,AT_C("#",THIS.icUserID)+1))
ENDIF

ENDIF


*
*  save these for use in THIS.SaveSettings
*
THIS.AddProperty("inDesignHeight",THIS.Height)
THIS.AddProperty("inDesignWidth",THIS.Width)

ENDPROC
PROCEDURE modifytemplate
*
*  called from THIS.lstTemplates.RightClick()
*

LOCAL lcFileName
lcFileName = THIS.iaTemplates[THIS.lstTemplates.Value,3]
IF EMPTY(m.lcFileName)
MESSAGEBOX("This feature is only available for those " + ;
"items for which a filename has been specified.", ;
48, ;
"Please Note")
RETURN
ENDIF

MODIFY COMMAND (m.lcFileName)

ENDPROC
PROCEDURE removemissingtemplates
*
*  remove any rows of THIS.lstTemplates that have
*  been added by THIS.RestoreSettings(), but which
*  templates are now missing
*

LOCAL xx, lnRows, lnRemoved, lnValue
lnRows = ALEN(THIS.iaTemplates,1)
lnValue = THIS.lstTemplates.Value

IF m.lnRows &lt; 5
*  nothing to do
RETURN
ENDIF

lnRemoved = 0
FOR xx = lnRows TO 5 STEP -1
IF NOT FILE(THIS.iaTemplates[m.xx,3])
lnRemoved = m.lnRemoved + 1
ADEL(THIS.iaTemplates,m.xx)
ENDIF
ENDFOR
IF m.lnRemoved &gt; 0
DIMENSION THIS.iaTemplates[m.lnRows-m.lnRemoved,ALEN(THIS.iaTemplates,2)]
THIS.lstTemplates.RowSource = THIS.lstTemplates.RowSource
THIS.lstTemplates.Value = 1
ENDIF



ENDPROC
PROCEDURE removetemplate
*
*  called from THIS.lstTemplates.RightClick()
*

IF THIS.iaTemplates[THIS.lstTemplates.Value,4]
MESSAGEBOX("This is a permanent item and may not be removed." + ;
CHR(13) + CHR(13) + ;
"You may only remove any custom templates of your own.", ;
48, ;
"Please Note")
RETURN
ENDIF

IF MESSAGEBOX("Are you sure you want to remove " + THIS.iaTemplates[THIS.lstTemplates.Value,2] + "?", ;
4+48, ;
"Please confirm") = 7
RETURN
ENDIF

LOCAL lnRow
lnRow = THIS.lstTemplates.Value
ADEL(THIS.iaTemplates,m.lnRow)
DIMENSION THIS.iaTemplates[ALEN(THIS.iaTemplates,1)-1,ALEN(THIS.iaTemplates,2)]
IF m.lnRow &gt; ALEN(THIS.iaTemplates,1)
THIS.lstTemplates.Value = THIS.lstTemplates.Value-1
ENDIF
THIS.lstTemplates.RowSource = THIS.lstTemplates.RowSource








ENDPROC
PROCEDURE restoresettings
*
*  restore settings from the last time this
*  form was run
*
*  this method is called from THIS.Init()
*
LOCAL lcUserID, lcCommand, lcAlias

lcUserID = THIS.icUserID
lcAlias = SYS(2015)

IF FILE(THIS.icPersistFile)
TRY
XMLTOCURSOR(THIS.icPersistFile,m.lcAlias,512)
*
*  apply settings for this user/developer
*
SELECT (m.lcAlias)
LOCATE
SCAN FOR UPPER(ALLTRIM(UserID)) == UPPER(ALLTRIM(THIS.icUserID))
lcCommand = ALLTRIM(Setting)
&amp;lcCommand
SELECT (m.lcAlias)
ENDSCAN
CATCH TO loException
ENDTRY
USE IN SELECT(m.lcAlias)
ENDIF

RETURN


ENDPROC
PROCEDURE savesettings
*
*  save settings so they can be restored the next
*  time this form is run (see THIS.Init() call to
*  THIS.RestoreSettings() method)
*
*  this method is called from THIS.Destroy()
*

LOCAL lcAlias
lcAlias = "FXUPersistGetTemplate"   &amp;&amp;&amp; SYS(2015)

TRY

IF FILE(THIS.icPersistFile)
XMLTOCURSOR(THIS.icPersistFile,m.lcAlias,512)
ELSE
CREATE CURSOR (m.lcAlias) (UserID C(10), Setting M)
ENDIF
SELECT (m.lcAlias)
*
*  delete all the existing settings for this user
*
DELETE ALL FOR UPPER(ALLTRIM(UserID)) == UPPER(ALLTRIM(THIS.icUserID))
SCATTER MEMVAR
m.UserID = THIS.icUserID

*
*  THISFORM settings
*
m.Setting = "THIS.Top = " + TRANSFORM(THIS.Top)
INSERT INTO (m.lcAlias) FROM MEMVAR
m.Setting = "THIS.Left = " + TRANSFORM(THIS.Left)
INSERT INTO (m.lcAlias) FROM MEMVAR
m.Setting = "THIS.Height = IIF(VERSION(5)&gt;=900," + TRANSFORM(THIS.Height) + "," + TRANSFORM(THIS.inDesignHeight) + ")"
INSERT INTO (m.lcAlias) FROM MEMVAR
m.Setting = "THIS.Width = IIF(VERSION(5)&gt;=900," + TRANSFORM(THIS.Width) + "," + TRANSFORM(THIS.inDesignWidth) + ")"
INSERT INTO (m.lcAlias) FROM MEMVAR

*
*  THISFORM checkbox values
*
m.Setting = "THIS.chkProcedure.Value = " + TRANSFORM(THIS.chkProcedure.Value)
INSERT INTO (m.lcAlias) FROM MEMVAR
m.Setting = "THIS.chkTab.Value = " + TRANSFORM(THIS.chkTab.Value)
INSERT INTO (m.lcAlias) FROM MEMVAR

*
*  THIS.lstTemplates.Value
*
m.Setting = "THIS.lstTemplates.Value = " + TRANSFORM(THIS.lstTemplates.Value)
INSERT INTO (m.lcAlias) FROM MEMVAR

*
*  all templates after the permanent templates
*

IF ALEN(THIS.iaTemplates,1) &gt; THIS.inPermanentTemplates
m.Setting = 'DIMENSION THIS.iaTemplates[' + TRANSFORM(ALEN(THIS.iaTemplates,1)) + ',' + TRANSFORM(ALEN(THIS.iaTemplates,2)) + ']'
INSERT INTO (m.lcAlias) FROM MEMVAR
LOCAL xx, yy
FOR xx = THIS.inPermanentTemplates+1 TO ALEN(THIS.iaTemplates,1)
IF EMPTY(THIS.iaTemplates[m.xx,2]) OR NOT FILE(THIS.iaTemplates[m.xx,3])
LOOP
ENDIF
FOR yy = 1 TO ALEN(THIS.iaTemplates,2)-1
m.Setting = 'THIS.iaTemplates[' + TRANSFORM(m.xx) + ',' + TRANSFORM(m.yy) + '] = "' + TRANSFORM(THIS.iaTemplates[m.xx,m.yy]) + ["]
INSERT INTO (m.lcAlias) FROM MEMVAR
ENDFOR
m.Setting = 'THIS.iaTemplates[' + TRANSFORM(m.xx) + ',' + TRANSFORM(ALEN(THIS.iaTemplates,2)) + '] = ' + TRANSFORM(THIS.iaTemplates[m.xx,m.yy])
INSERT INTO (m.lcAlias) FROM MEMVAR
ENDFOR
m.Setting = "THIS.lstTemplates.RowSource = THIS.lstTemplates.RowSource"
INSERT INTO (m.lcAlias) FROM MEMVAR
ENDIF

CURSORTOXML(m.lcAlias,THIS.icPersistFile,1,512,0,"1")

CATCH TO loException
ENDTRY

USE IN SELECT(m.lcAlias)

IF VARTYPE(m.loException) = "O"
MESSAGEBOX("Unable to save user settings because " + ;
CHR(13) + ;
loException.Message, ;
48, ;
"Please Note")
ENDIF

RETURN

ENDPROC
PROCEDURE sortoptionaltemplates
*
*  re-sort the optional templates, in alphabetical order
*

IF ALEN(THIS.iaTemplates,1) = THIS.inPermanentTemplates
*  nothing to do
RETURN
ENDIF

LOCAL lnRows, lnCols, lnPermanentRows, xx, yy, lnRow
lnRows = ALEN(THIS.iaTemplates,1)
lnCols = ALEN(THIS.iaTemplates,2)
lnPermanentRows = THIS.inPermanentTemplates

LOCAL laItems[m.lnRows-THIS.inPermanentTemplates,m.lnCols]

FOR xx = lnPermanentRows+1 TO m.lnRows
FOR yy = 1 TO m.lnCols
laItems[m.xx-m.lnPermanentRows,m.yy] = THIS.iaTemplates[m.xx,m.yy]
ENDFOR
ENDFOR

ASORT(laItems)

FOR xx = m.lnPermanentRows+1 TO m.lnRows
FOR yy = 1 TO m.lnCols
THIS.iaTemplates[m.xx,m.yy] = laItems[m.xx-m.lnPermanentRows,m.yy]
ENDFOR
ENDFOR

*lnRow = ASCAN(THISFORM.iaTemplates,m.lcFileName,3,-1,3,15)


ENDPROC
PROCEDURE templateclassinheritsfromfxutestcase
LPARAMETERS tcDefineClassStatement

LOCAL lcTestCaseClass, lcTestCaseClassProgramFile

m.tcDefineClassStatement = UPPER(ALLTRIM( m.tcDefineClassStatement ))

m.tcDefineClassStatement = SUBSTR( m.tcDefineClassStatement, ;
	ATC( " AS", m.tcDefineClassStatement ) + 3)
	
m.lcTestCaseClass = ALLTRIM(LEFT(m.tcDefineClassStatement, ;
	ATC("OF", m.tcDefineClassStatement) - 1))

m.lcTestCaseClassProgramFile = ALLTRIM(SUBSTR(m.tcDefineClassStatement, ;
	RATC(SPACE(1), m.tcDefineClassStatement))) 	
	
RETURN  FXUInheritsFromFxuTestCase( m.lcTestCaseClass, m.lcTestCaseClassProgramFile )
	

ENDPROC
PROCEDURE Unload
LOCAL lcResultVariable
lcResultVariable = THIS.icResultVariable
STORE THIS.iuRetVal TO &amp;lcResultVariable

RETURN THIS.iuRetVal

ENDPROC
PROCEDURE validatederivedtestcasetemplate
LPARAMETERS tcTestCaseTemplate

LOCAL llValidDerivedTestCaseTemplate
LOCAL lcValidatePrg, lnLInes
LOCAL ARRAY laLines[1]

llValidDerivedTestCaseTemplate = .f.

DO WHILE .t.

	IF !FILE(tcTestCaseTemplate)
		EXIT
	ENDIF
	
	
	
	
	
	
	
	


	EXIT
ENDDO

RETURN llValidDerivedTestCaseTemplate
ENDPROC
PROCEDURE validtemplatefile
*
*  RETURNs a logical value indicating whether the
*  passed tcFileName is a valid FXUTestCase template
*
LPARAMETERS tcFileName

LOCAL laLines[1], lcLine, llValid
=ALINES(laLines,FILETOSTR(m.tcFileName),.t.)
FOR EACH lcLine IN laLines
*  IF UPPER(ALLTRIM(m.lcLine)) = "DEFINE CLASS " ;
*      AND UPPER(" AS FXUTestCase OF FXUTestCase") $ UPPER(m.lcLine)

IF UPPER(ALLTRIM(m.lcLine)) = "DEFINE CLASS " ;
	AND (UPPER(" AS FXUTestCase OF FXUTestCase") $ UPPER(m.lcLine) ;
	OR this.TemplateClassInheritsFromFxuTestCase(m.lcLine))

*
*  MODIFY COMMAND FXUTestCase
*  MODIFY COMMAND FXUTestCaseTemplate.TXT
*    XXDTES("FXUTESTCASETEMPLATE.TXT","DEFINE CLASS")
*
IF UPPER(JUSTEXT(m.tcFileName)) = "TXT"
*  make sure it has the &lt;&lt;test class&gt;&gt; text
llValid = "&lt;&lt;" $ m.lcLine ;
AND "&gt;&gt;" $ m.lcLine ;
AND AT_C("&lt;&lt;",m.lcLine) &lt; AT_C("&gt;&gt;",m.lcLine)
ELSE
*  PRG
llValid = .t.
ENDIF
IF m.llValid
EXIT
ENDIF
ENDIF
ENDFOR

RETURN m.llValid




ENDPROC
PROCEDURE zreadme
#IF .f.

Class:  FXU.VCX/frmGetTestClassTemplate


#ENDIF
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1>Class</reserved1>
		<reserved2>11</reserved2>
		<reserved3>_memberdata XML Metadata for customizable properties
icnewtestclass
iuretval
icresultvariable
inpermanenttemplates
^iatemplates[1,0] 
*zreadme 
*modifytemplate 
*addtemplate 
*removetemplate 
*validtemplatefile 
*getyourfxutemplate 
*getyourfxutesttocopy 
*restoresettings 
*savesettings 
*sortoptionaltemplates 
*addvmptemplates 
*addcustomtemplates 
*removemissingtemplates 
*validatederivedtestcasetemplate 
*templateclassinheritsfromfxutestcase 
</reserved3>
		<reserved4/>
		<reserved5/>
		<reserved6>Pixels</reserved6>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>846094120</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdSelectTemplate</objname>
		<parent>frmgettestclasstemplate</parent>
		<properties>Top = 200
Left = 12
Height = 40
Width = 616
FontName = "Tahoma"
WordWrap = .T.
Caption = "Select the FoxUnit test case template that is currently selected in the above list.  Maintain the list via the shortcut menu options for the list."
Default = .F.
TabIndex = 4
Name = "cmdSelectTemplate"
</properties>
		<protected/>
		<methods>PROCEDURE Click
LOCAL lcTemplateFile

IF FILE(THISFORM.iaTemplates[THISFORM.lstTemplates.Value,3])
lcTemplateFile = THISFORM.iaTemplates[THISFORM.lstTemplates.Value,3]
ELSE
IF MESSAGEBOX("Unable to locate " + ;
CHR(13) + ;
THISFORM.iaTemplates[THISFORM.lstTemplates.Value,3] + ;
CHR(13) + CHR(13) + ;
"Remove it from the list?", ;
16 + 4, ;
"Please Note") = 6
THISFORM.RemoveTemplate()
ENDIF
RETURN .f.
ENDIF

THISFORM.iuRetVal = m.lcTemplateFile + ","
IF THISFORM.lstTemplates.Value &gt; 2
THISFORM.iuRetVal = THISFORM.iuRetVal + ".NULL.,.NULL."
ELSE
THISFORM.iuRetVal = THISFORM.iuRetVal + ;
IIF(THISFORM.chkProcedure.Value,"PROCEDURE","FUNCTION") + ;
"," + ;
IIF(THISFORM.chkTab.Value,"TABS","NOTABS")
ENDIF

THISFORM.Release()



ENDPROC
PROCEDURE Init
IF VERSION(5)&gt;=900
*
*  4 = Bottom Absolute
*  8 = Right Absolute
*  2 = Left Absolute
*
THIS.Anchor = 2 + 8 + 4
ENDIF


ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1A00BQSVT</uniqueid>
		<timestamp>841465404</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdCancel</objname>
		<parent>frmgettestclasstemplate</parent>
		<properties>Top = 384
Left = 544
Height = 39
Width = 84
FontName = "Tahoma"
Picture = ("FXUCancel.BMP")
Cancel = .T.
Caption = "\&lt;Cancel"
TabIndex = 7
Name = "cmdCancel"
</properties>
		<protected/>
		<methods>PROCEDURE Click
THISFORM.Release()
ENDPROC
PROCEDURE Init
IF VERSION(5)&gt;=900
*
*  4 = Bottom Absolute
*  8 = Right Absolute
*
THIS.Anchor = 8 + 4
ENDIF
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1A00CQY5E</uniqueid>
		<timestamp>841465404</timestamp>
		<class>listbox</class>
		<classloc/>
		<baseclass>listbox</baseclass>
		<objname>lstTemplates</objname>
		<parent>frmgettestclasstemplate</parent>
		<properties>FontName = "Tahoma"
ColumnCount = 2
ColumnWidths = "304,336"
Height = 148
ColumnLines = .F.
Left = 12
TabIndex = 1
Top = 12
Width = 616
IntegralHeight = .T.
ItemTips = .T.
Name = "lstTemplates"
</properties>
		<protected/>
		<methods>PROCEDURE Init
LOCAL lnRow, lnCols
lnRow = 0
lnCols = 4

lnRow = m.lnRow + 1
DIMENSION THISFORM.iaTemplates[m.lnRow,m.lnCols]
THISFORM.iaTemplates[m.lnRow,1] = "Standard FoxUnit test case template"
THISFORM.iaTemplates[m.lnRow,2] = "FXUTestCaseTemplate.TXT"
THISFORM.iaTemplates[m.lnRow,3] = FULLPATH(THISFORM.iaTemplates[m.lnRow,2])
THISFORM.iaTemplates[m.lnRow,4] = .t.   &amp;&amp;&amp; permanent

lnRow = m.lnRow + 1
DIMENSION THISFORM.iaTemplates[m.lnRow,m.lnCols]
THISFORM.iaTemplates[m.lnRow,1] = "Minimal FoxUnit test case template"
THISFORM.iaTemplates[m.lnRow,2] = "FXUTestCaseTemplate_Minimal.TXT"
THISFORM.iaTemplates[m.lnRow,3] = FULLPATH(THISFORM.iaTemplates[m.lnRow,2])
THISFORM.iaTemplates[m.lnRow,4] = .t.   &amp;&amp;&amp; permanent

THISFORM.inPermanentTemplates = ALEN(THISFORM.iaTemplates,1)

THIS.RowSourceType = 5
THIS.RowSource = "THISFORM.iaTemplates"

THIS.Value = 1

IF VERSION(5)&gt;=900
*
*    1 = Top Absolute
*    2 = Left Absolute
*  128 = Right Relative
*    4 = Bottom Absolute
*
THIS.Anchor = 1 + 2 + 128 + 4
ENDIF


ENDPROC
PROCEDURE InteractiveChange
THISFORM.Refresh()

ENDPROC
PROCEDURE RightClick
DEFINE POPUP pShortCut IN WINDOW (THISFORM.Name) SHORTCUT RELATIVE FROM MROW(THISFORM.Name),MCOL(THISFORM.Name)

DEFINE BAR 1 OF pShortCut PROMPT "MODIFY COMMAND the indicated template"
ON SELECTION BAR 1 OF pShortCut _Screen.ActiveForm.ModifyTemplate()

DEFINE BAR 2 OF pShortCut PROMPT "Add a template file to this list"
ON SELECTION BAR 2 OF pShortCut _Screen.ActiveForm.AddTemplate()

DEFINE BAR 3 OF pShortCut PROMPT "Remove this template from the list"
ON SELECTION BAR 3 OF pShortCut _Screen.ActiveForm.RemoveTemplate()

ACTIVATE POPUP pShortCut

ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>846094120</timestamp>
		<class>checkbox</class>
		<classloc/>
		<baseclass>checkbox</baseclass>
		<objname>chkProcedure</objname>
		<parent>frmgettestclasstemplate</parent>
		<properties>Top = 164
Left = 32
Height = 17
Width = 540
Alignment = 0
BackStyle = 0
Caption = 'Use "PROCEDURE MethodName" rather than "FUNCTION MethodName" for method names?'
Value = .F.
Enabled = .F.
TabIndex = 2
Name = "chkProcedure"
</properties>
		<protected/>
		<methods>PROCEDURE Init
IF VERSION(5)&gt;=900
*
*  2 = Left Absolute
*  4 = Bottom Absolute
*
THIS.Anchor = 2 + 4
ENDIF
ENDPROC
PROCEDURE Refresh
THIS.Enabled = THISFORM.lstTemplates.Value &lt; 3


ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1A00O33F8</uniqueid>
		<timestamp>846094120</timestamp>
		<class>checkbox</class>
		<classloc/>
		<baseclass>checkbox</baseclass>
		<objname>chkTab</objname>
		<parent>frmgettestclasstemplate</parent>
		<properties>Top = 180
Left = 32
Height = 17
Width = 180
Alignment = 0
BackStyle = 0
Caption = "Indent methods by one TAB?"
Value = .T.
Enabled = .F.
TabIndex = 3
Name = "chkTab"
</properties>
		<protected/>
		<methods>PROCEDURE Init
IF VERSION(5)&gt;=900
*
*  2 = Left Absolute
*  4 = Bottom Absolute
*
THIS.Anchor = 2 + 4
ENDIF
ENDPROC
PROCEDURE Refresh
THIS.Enabled = THISFORM.lstTemplates.Value &lt; 3

ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>841465404</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdSelectCustomTemplate</objname>
		<parent>frmgettestclasstemplate</parent>
		<properties>Top = 264
Left = 52
Height = 40
Width = 576
FontName = "Tahoma"
WordWrap = .T.
Caption = "Select a custom FoxUnit template of your own.  If you select one that is not in the list above, it will be automatically added to the list the next time you invoke this dialog."
Default = .F.
TabIndex = 5
Name = "cmdSelectCustomTemplate"
</properties>
		<protected/>
		<methods>PROCEDURE Click
LOCAL lcTemplateFile

lcTemplateFile = THISFORM.GetYourFXUTemplate()

IF NOT VARTYPE(m.lcTemplateFile) = "C" OR EMPTY(m.lcTemplateFile)
RETURN
ENDIF

THISFORM.iuRetVal = m.lcTemplateFile + ",.NULL.,.NULL."

THISFORM.Release()


ENDPROC
PROCEDURE Init
IF VERSION(5)&gt;=900
*
*  4 = Bottom Absolute
*  8 = Right Absolute
*  2 = Left Absolute
*
THIS.Anchor = 2 + 8 + 4
ENDIF

ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1A70NTWD9</uniqueid>
		<timestamp>841465404</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdCopyExistingPRG</objname>
		<parent>frmgettestclasstemplate</parent>
		<properties>Top = 328
Left = 52
Height = 40
Width = 576
FontName = "Tahoma"
WordWrap = .T.
Caption = "Copy an existing FoxUnit test case class (.PRG) to the new test case class"
Default = .T.
TabIndex = 6
Name = "cmdCopyExistingPRG"
</properties>
		<protected/>
		<methods>PROCEDURE Click
LOCAL lcTemplateFile

lcTemplateFile = THISFORM.GetYourFXUTestToCopy()

IF NOT VARTYPE(m.lcTemplateFile) = "C" OR EMPTY(m.lcTemplateFile)
RETURN
ENDIF

THISFORM.iuRetVal = m.lcTemplateFile + ",.NULL.,.NULL."

THISFORM.Release()


ENDPROC
PROCEDURE Init
IF VERSION(5)&gt;=900
*
*  4 = Bottom Absolute
*  8 = Right Absolute
*  2 = Left Absolute
*
THIS.Anchor = 2 + 8 + 4
ENDIF

ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>846094120</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>lblOR1</objname>
		<parent>frmgettestclasstemplate</parent>
		<properties>FontBold = .T.
FontName = "Tahoma"
FontSize = 12
BackStyle = 0
Caption = "-OR-"
Height = 17
Left = 12
Top = 272
Width = 40
Name = "lblOR1"
</properties>
		<protected/>
		<methods>PROCEDURE Init
IF VERSION(5)&gt;=900
*
*  4 = Bottom Absolute
*  2 = Left Absolute
*
THIS.Anchor = 4 + 2
ENDIF
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>846094120</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>lblOR2</objname>
		<parent>frmgettestclasstemplate</parent>
		<properties>FontBold = .T.
FontName = "Tahoma"
FontSize = 12
BackStyle = 0
Caption = "-OR-"
Height = 17
Left = 12
Top = 340
Width = 40
Name = "lblOR2"
</properties>
		<protected/>
		<methods>PROCEDURE Init
IF VERSION(5)&gt;=900
*
*  4 = Bottom Absolute
*  2 = Left Absolute
*
THIS.Anchor = 4 + 2
ENDIF
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1A70OBFZN</uniqueid>
		<timestamp>846094120</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>lblCancel</objname>
		<parent>frmgettestclasstemplate</parent>
		<properties>FontName = "Tahoma"
WordWrap = .T.
BackStyle = 0
Caption = "(or Cancel/close this form if you have changed your mind and don't want to create a new FoxUnit test case class)"
Height = 32
Left = 220
Top = 388
Width = 316
Name = "lblCancel"
</properties>
		<protected/>
		<methods>PROCEDURE Init
IF VERSION(5)&gt;=900
*
*  4 = Bottom Absolute
*  8 = Right Absolute
*
THIS.Anchor = 8 + 4
ENDIF
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>COMMENT</platform>
		<uniqueid>RESERVED</uniqueid>
		<timestamp>0</timestamp>
		<class/>
		<classloc/>
		<baseclass/>
		<objname>frmgettestclasstemplate</objname>
		<parent/>
		<properties>Arial, 0, 9, 5, 15, 12, 32, 3, 0
Tahoma, 0, 9, 5, 14, 12, 23, 2, 0
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3S7</uniqueid>
		<timestamp>846149165</timestamp>
		<class>form</class>
		<classloc/>
		<baseclass>form</baseclass>
		<objname>frmfoxunit</objname>
		<parent/>
		<properties>DataSession = 2
Height = 480
Width = 724
ShowWindow = 2
DoCreate = .T.
ShowTips = .T.
AutoCenter = .T.
Caption = "FoxUnit - The Unit Testing Framework for Visual FoxPro"
Visible = .F.
FillStyle = 1
Icon = (("FoxUnit.ico"))
AllowOutput = .F.
incolorpass = (rgb(0,220,0))
incolornotrun = (rgb(200,200,200))
incolorfail = (rgb(255,50,50))
ilallowdebug = .F.
inmostrecentselectedrow = 1
icgridrs = FXUResults
ilinitialentry = .T.
_memberdata = 
inbar = 0
inzoomwindowstate = 0
icclassfilter = 
icnamefilter = 
ilhonortestprefix = .F.
ilclosedebuggeratendoftestsrun = .F.
Name = "frmfoxunit"
</properties>
		<protected/>
		<methods>PROCEDURE acknowledgements
*
*  this method is called from the form-level shortcut menu
*

LOCAL lcSetClassLib, loForm
lcSetClassLib = SET("CLASSLIB")
SET CLASSLIB TO FXU

loForm = CREATEOBJECT("frmShowInfo", ;
FILETOSTR("FoxUnitAcknowledgements.TXT"), ;
.f., ;					
"FoxUnit Acknowledgements", ;
40, ;
.f., ;
SYSMETRIC(2)-160)
loForm.Show()

SET CLASSLIB TO &amp;lcSetClassLib
ENDPROC
PROCEDURE Activate
IF THIS.ilInitialEntry ;
AND RECCOUNT(THIS.icGridRS) = 0
*
*  on instantiation, if there are no records in
*  the grid cursor/test results cursor, then
*  start focus on the &lt;Create New&gt; button
*
THIS.cmdCreateNewTestClass.SetFocus()
ENDIF

IF NOT THIS.ilInitialEntry
*
*  remove this menu pad (installed in THIS.Deactivate)
*  any time this form is the active form
*
RELEASE PAD pFoxUnit OF _MSYSMENU
ENDIF

IF THIS.ilInitialEntry
IF THIS.ilLargeGrid   &amp;&amp;&amp; set in THIS.RestoreSettings()
*
*  I couldn't get this to work properly in
*  THIS.Init
*
THIS.ilLargeGrid = .f.
THIS.GridSize()
ENDIF
ENDIF

THIS.ilInitialEntry = .f.

IF TYPE("THIS.ilReloadCurrentClassOnActivate") = "L" ;
AND THIS.ilReloadCurrentClassOnActivate
*
*  FXUResultData::AddNewTest() and ModifyExistingTest()
*  can set this flag
*    MODIFY COMMAND FXUResultData
*
THIS.cmdReloadSelectedTestClass.Click()
ENDIF

ENDPROC
PROCEDURE addshortcutoption_classaddtest
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Add a new test (method) to the currently-selected Test Class" ;
PICTURE (THIS.cmdAddNewTest.Picture)
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.cmdAddNewTest.Click()

ENDPROC
PROCEDURE addshortcutoption_classload
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Load a Test Class (.PRG) that is not already in the list" ;
PICTURE (THIS.cmdLoadNewTestClass.Picture)
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.cmdLoadNewTestClass.Click()

ENDPROC
PROCEDURE addshortcutoption_classnew
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Create a new Test Class (.PRG)" ;
PICTURE (THIS.cmdCreateNewTestClass.Picture)
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.cmdCreateNewTestClass.Click()

ENDPROC
PROCEDURE addshortcutoption_detailsprint
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Print..."
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.DetailsPrint()

ENDPROC
PROCEDURE addshortcutoption_detailszoom
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Zoom..."
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.DetailsZoom()


ENDPROC
PROCEDURE addshortcutoption_formacknowledgements
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Acknowledgements..." ;
PICTURE "FXUAcknowledgements.BMP"
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.Acknowledgements()

ENDPROC
PROCEDURE addshortcutoption_formclose
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Close" ;
PICTURE "FXUFormClose.BMP"
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.Release()

ENDPROC
PROCEDURE addshortcutoption_formfont
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Font..."
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.FormFont()


ENDPROC
PROCEDURE addshortcutoption_formlicense
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "License..." ;
PICTURE "FXULicense.BMP"
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.License()

ENDPROC
PROCEDURE addshortcutoption_formoptions
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Options..." ;
PICTURE "FXUOptions.BMP"
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.Options()

ENDPROC
PROCEDURE addshortcutoption_formresetfont
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Reset Font to default"
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.FormResetFont()

ENDPROC
PROCEDURE addshortcutoption_gridresetcolumnwidths
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Reset column widths to default"
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.GridResetColumnWidths()


ENDPROC
PROCEDURE addshortcutoption_gridsize
THIS.inBar = ((THIS.inBar/10)+1)*10
THIS.LockScreen = .t.

IF THIS.ilLargeGrid
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Normal size list"
ELSE
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Large size list"
ENDIF

THIS.LockScreen = .f.

ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.GridSize()

ENDPROC
PROCEDURE addshortcutoption_gridsortbylocation
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Sort By Location"
IF UPPER(ORDER(THIS.icGridRS)) = UPPER("TCLoc")
SET MARK OF BAR THIS.inBar OF pShortCut TO .t.
ENDIF
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.GridSortByLocation()

ENDPROC
PROCEDURE addshortcutoption_gridsortbyname
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Sort By Name"
IF UPPER(ORDER(THIS.icGridRS)) = UPPER("TCLName")
SET MARK OF BAR THIS.inBar OF pShortCut TO .t.
ENDIF
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.GridSortByName()


ENDPROC
PROCEDURE addshortcutoption_runtestsall
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Run ALL the tests in the list" ;
PICTURE (THIS.cmdRunTestsAll.Picture)
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.cmdRunTestsAll.Click()

ENDPROC
PROCEDURE addshortcutoption_runtestsclass
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Run all the tests in the currently-selected Test Class" ;
PICTURE (THIS.cmdRunTestsOneClass.Picture)
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.cmdRunTestsOneClass.Click()

ENDPROC
PROCEDURE addshortcutoption_runtestselected
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Run only the currently-selected test" ;
PICTURE (THIS.cmdRunTestsOne.Picture)
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.cmdRunTestsOne.Click()

ENDPROC
PROCEDURE addshortcutoption_selectedmodify
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Modify the currently-selected test" ;
PICTURE (THIS.cmdModifySelected.Picture)
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.cmdModifySelected.Click()

ENDPROC
PROCEDURE addshortcutoption_selectedreload
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Reload the Test Class containing the currently-selected test" ;
PICTURE (THIS.cmdReloadSelectedTestClass.Picture)
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.cmdReloadSelectedTestClass.Click()

ENDPROC
PROCEDURE addshortcutoption_selectedremove
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
PROMPT "Remove the Test Class containing the currently-selected test" ;
PICTURE (THIS.cmdRemoveTestClass.Picture)
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.cmdRemoveTestClass.Click()

ENDPROC
PROCEDURE addshortcutoption_separator
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut PROMPT "\-"

ENDPROC
PROCEDURE afterruntests
LPARAMETERS tlNoGridSetFocus

*
*  this method is called after each of the "run test(s)"
*  methods, and several other places
*
*  and from THIS.grdTests.AfterRowColChange(), which
*  passes the tlNoGridSetFocus parameter here as .T.
*

IF VARTYPE(tlNoGridSetFocus) != "L"
	tlNoGridSetFocus = .f.
ENDIF


IF this.ilTestsFailed AND !tlNoGridSetFocus
	SELECT (this.icGridRs)
	GO TOP
	LOCATE FOR trun = .t. and success = .f. and UPPER(TNAME) != "(NONE)"
ENDIF

THIS.pgfDetails.pgFailuresAndErrors.edtFailuresAndErrors.Refresh()
THIS.pgfDetails.pgMessages.edtMessages.Refresh()

This.pgfDetails.pgFailuresAndErrors.FontBold = ;
	NOT EMPTY(THIS.pgfDetails.pgFailuresAndErrors.edtFailuresAndErrors.text)
This.pgfDetails.pgMessages.FontBold = ;
	NOT EMPTY(THIS.pgfDetails.pgMessages.edtMessages.text)

THIS.UpdateCurrentGridRowColor()

IF !tlNoGridSetFocus
THIS.grdTests.SetFocus()
ENDIF

ENDPROC
PROCEDURE applyfilter
*
*  this method is called from the LostFocus of
*  the two filter textboxes above the grid
*

IF EMPTY(THIS.icClassFilter) ;
AND EMPTY(THIS.icNameFilter) ;
AND EMPTY(FILTER(THIS.icGridRS))
*
*  nothing to do
*
RETURN
ENDIF

LOCAL lcFilter
lcFilter = UPPER(ALLTRIM(THIS.icClassFilter))
IF NOT EMPTY(m.lcFilter)
lcFilter = ['] + m.lcFilter + [' $ UPPER(TClass)]
ENDIF
IF NOT EMPTY(UPPER(THIS.icNameFilter))
IF NOT EMPTY(m.lcFilter)
lcFilter = m.lcFilter + " AND "
ENDIF
lcFilter = m.lcFilter + ['] + UPPER(ALLTRIM(THIS.icNameFilter)) + [' $ UPPER(TName)]
ENDIF

LOCAL lnSelect
lnSelect = SELECT(0)
SELECT (THIS.icGridRS)

IF EMPTY(m.lcFilter)
SET FILTER TO
ELSE
SET FILTER TO &amp;lcFilter
IF NOT EVALUATE(m.lcFilter)
*
*  current record does not meet the new
*  filter condition
*
LOCATE
ENDIF
ENDIF

THIS.LockScreen = .t.

THIS.grdTests.Refresh()

*
*  scroll PageUp, so that if the filter includes more
*  records above the first/top one showing in the grid,
*  we can see at least some of them
*
THIS.grdTests.DoScroll(2)

THIS.cmdClearFilter.Refresh()

THIS.LockScreen = .f.
ENDPROC
PROCEDURE calculaterowcolor
LPARAMETERS tlSuccess, tlRun

LOCAL lnRowColor
DO CASE
CASE m.tlRun = .f.
	lnRowColor = THIS.inColorNotRun
CASE m.tlSuccess = .t.
	lnRowColor = THIS.inColorPass
OTHERWISE
lnRowColor = THIS.inColorFail
ENDCASE

RETURN m.lnRowColor
	
		
		
ENDPROC
PROCEDURE Deactivate
IF NOT USED(THIS.grdTests.RecordSource)
*  see THIS.ReceiveResultsNotification()
RETURN
ENDIF

*
*  install a FoxUnit menu pad whenever this form is
*  deactivated/minimized, etc.
*
DEFINE PAD pFoxUnit OF _MSYSMENU PROMPT "FoxUnit"
ON SELECTION PAD pFoxUnit OF _MSYSMENU FXUShowForm()
*
*  MODIFY COMMAND FXUShowForm
*

IF RECCOUNT(THIS.icGridRS) &gt; 1
*
*  don't bother with this info if you've been
*  here a few times
*
ELSE
ACTIVATE SCREEN
? "The FoxUnit form interface is a Top-Level form, and can be re-activated via:"
? "  - The FoxUnit pad on the VMP system menu"
? "  - The FoxUnit item in the Windows Taskbar"
ENDIF


ENDPROC
PROCEDURE Destroy
THIS.SaveSettings()

THIS.ioTestResult = .f.
THIS.ioTestBroker = .f.
THIS.ioResultData = .f.

ENDPROC
PROCEDURE detailsprint
LOCAL lcSetProc
lcSetProc = SET("PROCEDURE")
*
*  MODIFY COMM FXU
*
SET PROCEDURE TO FXU.PRG ADDITIVE

LOCAL loEditbox
loEditbox = THIS.ActiveControl

CREATEOBJECT("sesTextBlockReport", ;
loEditBox.Text, ;
loEditBox.Parent.Caption)

SET PROCEDURE TO &amp;lcSetProc

ENDPROC
PROCEDURE detailszoom
*
*  this method is called from the editbox-level shortcut menu,
*  and focus could be in either editbox
*

LOCAL lcSetClassLib, loForm, loEditBox
lcSetClassLib = SET("CLASSLIB")
SET CLASSLIB TO FXU

loEditBox = THIS.ActiveControl

LOCAL loParameter
loParameter = CREATEOBJECT("Empty")
ADDPROPERTY(loParameter,"iaCode[1]")
loParameter.iaCode[1] = "THIS.WindowState = " + TRANSFORM(THIS.inZoomWindowState)

loForm = CREATEOBJECT("frmShowInfo", ;
loEditbox.Text, ;
m.loParameter, ;
loEditBox.Parent.Caption, ;
THIS.inZoomTop, ;
THIS.inZoomLeft, ;
THIS.inZoomHeight, ;
THIS.inZoomWidth, ;
loEditBox.FontName, ;
loEditBox.FontSize, ;
loEditBox.FontBold, ;
loEditBox.FontItalic)
loForm.Show()

ENDPROC
PROCEDURE formatsecondselapsed
LPARAMETERS tnSecondsElapsed

LOCAL lcFormattedTimeElapsed

lcFormattedTimeElapsed = ;
TRANSFORM(INT(tnSecondsElapsed/(60*60))) + ':'  + ;
PADL(TRANSFORM(INT(tnSecondsElapsed/60)),2,'0') + ':' + ;
PADL(TRANSFORM(MOD(INT(tnSecondsElapsed),60)),2,'0') + '.' +  ;
RIGHTC(STR(tnSecondsElapsed,10,3),3)

RETURN lcFormattedTimeElapsed
ENDPROC
PROCEDURE formfont
*
*  called from the Form-Level shortcut menu
*

LOCAL lcFontName, lnFontSize, lcFontStyle, llFontBold, ;
llFontItalic, lcNewFont
lcFontName = THIS.grdTests.FontName
lnFontSize = THIS.grdTests.FontSize
lcFontStyle = IIF(THIS.grdTests.FontBold,"B",SPACE(0))
lcFontStyle = m.lcFontStyle + IIF(THIS.grdTests.FontItalic,"I",SPACE(0))

lcNewFont =  GETFONT(m.lcFontName, lnFontSize, lcFontStyle)

THIS.Show()

IF EMPTY(m.lcNewFont)
RETURN
ENDIF

THIS.LockScreen = .t.

lcFontName = GETWORDNUM(m.lcNewFont,1,",")
lnFontSize = INT(VAL(GETWORDNUM(m.lcNewFont,2,",")))
lcFontStyle = GETWORDNUM(m.lcNewFont,3,",")

llFontBold = "B" $ m.lcFontStyle
llFontItalic = "I" $ m.lcFontStyle

THIS.grdTests.FontName = m.lcFontName
THIS.grdTests.FontSize = m.lnFontSize
THIS.grdTests.FontBold = m.llFontBold
THIS.grdTests.FontItalic = m.llFontItalic

THIS.pgfDetails.SetAll("FontName",m.lcFontName)
THIS.pgfDetails.SetAll("FontSize",m.lnFontSize)
THIS.pgfDetails.SetAll("FontBold",m.llFontBold)
THIS.pgfDetails.SetAll("FontItalic",m.llFontItalic)

THIS.LockScreen = .f.

ENDPROC
PROCEDURE formresetfont
*
*  this method is called from the form-level shortcut
*  menu
*

THIS.LockScreen = .t.

THIS.grdTests.ResetToDefault("FontName")
THIS.grdTests.ResetToDefault("FontSize")
THIS.grdTests.ResetToDefault("FontBold")
THIS.grdTests.ResetToDefault("FontItalic")

LOCAL loPage, loControl
FOR EACH loPage IN THIS.pgfDetails.Pages
loPage.ResetToDefault("FontName")
loPage.ResetToDefault("FontSize")
loPage.ResetToDefault("FontBold")
loPage.ResetToDefault("FontItalic")
FOR EACH loControl IN loPage.Controls
loControl.ResetToDefault("FontName")
loControl.ResetToDefault("FontSize")
loControl.ResetToDefault("FontBold")
loControl.ResetToDefault("FontItalic")
ENDFOR
ENDFOR

loPage = .NULL.
loControl = .NULL.

THIS.grdTests.ResetToDefault("FontSize")

THIS.LockScreen = .f.

ENDPROC
PROCEDURE getfiltertooltiptext
LOCAL lcText

TEXT TO lcText NOSHOW
Filter the list to display only those classes (.PRGs)/tests~
for which the entered string(s) are contained in the name of~
the class/test.

For example, to see all tests of Customer code, business~
objects, etc. enter "Customer" (without the quotes) in the~
Name filter string textbox.

The string you enter in both filter string textbox is case-~
insensitive -x the list is filtered where the UPPER() of the~
filter string(s) is contained in the UPPER() of the class/test~
names.
ENDTEXT

m.lcText = CHRTRAN(m.lcText,"~",SPACE(0))

RETURN m.lcText
ENDPROC
PROCEDURE gridresetcolumnwidths
*
*  this method is called from the grid-level shortcut menu
*

LOCAL loColumn
FOR EACH loColumn IN THIS.grdTests.Columns
loColumn.ResetToDefault("Width")
ENDFOR

IF VERSION(5)&gt;=900
THIS.grdTests.Resize()
ENDIF

ENDPROC
PROCEDURE gridsize
*
*  this method is called from the grid-level shortcut menu
*

IF NOT THIS.ilInitialEntry
THIS.LockScreen = .t.
ENDIF

IF THIS.ilLargeGrid
*
*  default/normal size
*
THIS.grdTests.ResetToDefault("Height")
THIS.ilLargeGrid = .f.
IF VERSION(5)&gt;=900
*
*  get the anchor-based proportional size to fire
*
THISFORM.Height = THISFORM.Height+1
THISFORM.Height = THISFORM.Height-1
ENDIF
ELSE
*
*  larger
*
THIS.grdTests.Height = THIS.pgfDetails.Top+THIS.pgfDetails.Height - THIS.grdTests.Top
THIS.ilLargeGrid = .t.
ENDIF

IF NOT THIS.ilInitialEntry
THIS.LockScreen = .f.
ENDIF

ENDPROC
PROCEDURE gridsortbylocation
IF UPPER(ORDER(THIS.icGridRS)) = UPPER("TCLoc")
RETURN
ENDIF

IF RECCOUNT(THIS.icGridRS) = 0
RETURN
ENDIF

LOCAL lnRecno
lnRecno = IIF(EOF(THIS.icGridRS),0,RECNO(THIS.icGridRS))

THIS.LockScreen = .t.

SET ORDER TO TAG TCLoc IN (THIS.icGridRS)
THIS.grdTests.Refresh()
IF m.lnRecno = 0
GO TOP IN (THIS.icGridRS)
ELSE
GOTO (m.lnRecno) IN (THIS.icGridRS)
ENDIF
THIS.grdTests.Refresh()

THIS.LockScreen = .f.




ENDPROC
PROCEDURE gridsortbyname
IF UPPER(ORDER(THIS.icGridRS)) = UPPER("TCLName")
RETURN
ENDIF

IF RECCOUNT(THIS.icGridRS) = 0
RETURN
ENDIF

LOCAL lnRecno
lnRecno = IIF(EOF(THIS.icGridRS),0,RECNO(THIS.icGridRS))

THIS.LockScreen = .t.

SET ORDER TO TAG TCLName IN (THIS.icGridRS)
THIS.grdTests.Refresh()
IF m.lnRecno = 0
GO TOP IN (THIS.icGridRS)
ELSE
GOTO (m.lnRecno) IN (THIS.icGridRS)
ENDIF
THIS.grdTests.Refresh()

THIS.LockScreen = .f.

ENDPROC
PROCEDURE Init
THIS.ioTestResult = FxuNewObject("FxuTestResult")

* FXU/JDE 07/01/2004
* Now setting ioTestBroker from Fxu.prg
* test broker is now instantiated prior to the
* Fox Unit form and passed to it. This is to de-couple
* any UI code tested by FoxUnit so that it runs
* in the main VFP window (or as a top-level form in
* it's own right if warranted) instead of as
* a child of the FoxUnit form

*THIS.ioTestBroker = FxuNewObject("FxuTestBroker")

SET ORDER TO TAG TCLoc IN (THIS.icGridRS)

GO TOP IN (THIS.icGridRS)

IF VERSION(5)&gt;=900
*
*  don't permit sizing smaller than the
*  initial designed size
*
THIS.MinHeight = THIS.Height
THIS.MinWidth = THIS.Width
ELSE
*
*  no Maximize in VFP8 - anchor resizing in VFP9
*
THIS.MaxButton = .f.
*
*  ditto the ability to resize
*
THIS.BorderStyle = 1
ENDIF

THISFORM.AddProperty("ilLargeGrid",.f.)

*
*  apply settings saved last time in THIS.SaveSettings(),
*  called from THIS.Destroy()
*
THIS.RestoreSettings()

*
*  THIS.inColorNotRun is now ignored -- I've set it
*  to match the default/normal color
*
THIS.inColorNotRun = THIS.grdTests.BackColor

THIS.UpdateCurrentGridRowColor()

THIS.LockScreen = .f.


ENDPROC
PROCEDURE KeyPress
LPARAMETERS nKeyCode, nShiftAltCtrl

*
*  we only get here when focus is in THIS.grdTests --
*  see its When and Valid
*

IF m.nKeyCode = 4
*
*  THIS.grdTests.Columns exactly fill the available
*  grid width, and therefore we're suppressing this
*  {RightArrow} keystroke, which would otherwise
*  undesirably scroll the grid leftward
*
*  note that grdBase::When() and grdBase::Valid()
*  have code to only set THIS.KeyPreview to .T. when
*  the grid has focus, so that this method does
*  not fire in normal scenarios
*
NODEFAULT
*
*  and now we'll call the grid.KeyPress() manually,
*  so that any RightArrow-specific code still fires
*  (the above NODEFAULT suppresses the native VFP
*  Grid.KeyPress method from firing) -- note that
*  this code calls the Grid.KeyPress() method, but
*  DOES NOT fire the Grid.KeyPress EVENT
*
THIS.grdTests.KeyPress(4,m.nShiftAltCtrl)
ENDIF


IF m.nShiftAltCtrl = 2 AND INLIST(m.nKeyCode,30,31)
*
*  nShiftAltCtrl = 2/CTRL
*  nKeyCode = 30/PgDn
*  nKeyCode = 31/PgUp
*
IF m.nKeyCode = 30
THIS.MoveToFirstTestOfNextClass(.t.)
ELSE
THIS.MoveToFirstTestOfNextClass(.f.)
ENDIF
ENDIF

IF m.nShiftAltCtrl = 2 AND m.nKeyCode = 19
*
*  CTRL+s
*
THIS.GridSize()
ENDIF
ENDPROC
PROCEDURE license
*
*  this method is called from the form-level shortcut menu
*

LOCAL lcSetClassLib, loForm
lcSetClassLib = SET("CLASSLIB")
SET CLASSLIB TO FXU

loForm = CREATEOBJECT("frmShowInfo", ;
FILETOSTR("FoxUnitLicense.TXT"), ;
.f., ;				
"FoxUnit Open Source License", ;
40, ;
.f., ;
SYSMETRIC(2)-160)
loForm.Show()

SET CLASSLIB TO &amp;lcSetClassLib
ENDPROC
PROCEDURE Load
IF UPPER(JUSTSTEM(SYS(16,0))) == "FXU" ;
OR UPPER(PROGRAM(PROGRAM(-1)-2)) == "FXU"
*
*  FoxUnit started via DO FXU or by a menu
*  option that issues DO FXU
*
ELSE
MESSAGEBOX("The FoxUnit form interface is designed to be " + ;
"called from the FXU.PRG -- please start the " + ;
"FoxUnit form interface by:" + CHR(13) + CHR(13) + ;
"  DO FXU", ;
48, ;
"Please Note")
KEYBOARD "DO FXU " PLAIN CLEAR
ACTIVATE WINDOW Command
RETURN .f.
ENDIF

*
*  SET commands scoped to private data sessions
*
SET CENTURY ON
SET DELETED ON
SET SAFETY OFF
SET EXCLUSIVE OFF
SET MULTILOCKS ON
SET NOTIFY OFF
SET SAFETY OFF
SET TALK OFF

LOCAL lcFXUDataPath
IF FILE("FXUResults.DBF")
lcFXUDataPath = ADDBS(JUSTPATH(FULLPATH("FXUResults.DBF")))
ELSE
MESSAGEBOX("There is no FXUResults.DBF FoxUnit results table " + ;
"in your VFP path at the moment." + ;
CHR(13) + CHR(13) + ;
"Either:" + ;
CHR(13) + CHR(13) + ;
"This is the first time you have run FoxUnit " + ;
"for this application/development environment -- " + ;
"Specify/create the folder where you will store " + ;
"the test classes (.PRGs) and FXUResults.DBF table " + ;
"in the GETFILE() dialog presented " + ;
"after you acknowledge this dialog." + ;
CHR(13) + CHR(13) + ;
"-OR-" + ;
CHR(13) + CHR(13) + ;
"You have already run FoxUnit for this application/" + ;
"development environment, but you have not ensured " + ;
"that the folder containing the FoxUnit tests and " + ;
"FXUResults.DBF results table is in your VFP path -- " + ;
"You can select that folder in the GETFILE() dialog " + ;
"that is about to be presented, but we recommend " + ;
"instead that you Cancel from the GETFILE() dialog " + ;
"and update your VFP path to include the FoxUnit " + ;
"tests and results folder.", ;
48, ;
"Please Note")
lcFXUDataPath = GETDIR(FULLPATH(CURDIR()), ;
[Specify the folder for the FXUResults.DBF results table.  We recommend that you specify the folder where you will store the test classes (.PRGs), typically in a FoxUnitTests/FXUTests/etc. folder under the application root and in the VFP path.], ;
"Specify the folder for the FXUResults.DBF table", ;
1+2+8+16+32+64)
IF EMPTY(m.lcFXUDataPath)
RETURN .f.
ENDIF
lcFXUDataPath = ADDBS(m.lcFXUDataPath)
IF FILE(m.lcFXUDataPath + "FXUResults.DBF")
*
*  FXUResults.DBF already exists -- the -OR- condition
*  above has apparently been met, so add m.lcFXUDataPath
*  to the VFP path
*
LOCAL lcPath
#IF VERSION(5) &gt;= 900    &amp;&amp;&amp; VFP 9
*  all these work:
*SET PATH TO (lcFXUDataPath) ADDITIVE
*
*SET PATH TO "&amp;lcFXUDataPath" ADDITIVE
*
*lcFXUDataPath = ["] + m.lcFXUDataPath + ["]
*SET PATH TO &amp;lcFXUDataPath ADDITIVE
*
lcPath = ["] + m.lcFXUDataPath + ["]
SET PATH TO &amp;lcPath ADDITIVE
#ELSE   &amp;&amp;&amp; VFP 8
lcPath = SET("PATH") + "; " + m.lcFXUDataPath
SET PATH TO &amp;lcPath
#ENDIF
MESSAGEBOX(m.lcFXUDataPath + CHR(13) + CHR(13) + ;
"has been added to your VFP path -- you should " + ;
"ensure that from now on it is in your VFP path " + ;
"before you run FoxUnit.", ;
48, ;
"Please Note")
ENDIF
ENDIF

*
*  make sure FXUResults.DBF/THIS.icGridRS exists and is
*  opened
*    MODIFY COMMAND FXUResultData
*
THIS.ioResultData = FxuNewObject("FXUResultData", ;
m.lcFXUDataPath, ;
"FXUResults.DBF")
IF NOT VARTYPE(THIS.ioResultData) = "O"
MESSAGEBOX("Unable to locate/initialize the FXUResults.DBF " + ;
"FoxUnit results table.", ;
16, ;
"Please Note")
RETURN .f.
ENDIF
IF NOT USED("FXUResults")
MESSAGEBOX("Unable to open the FXUResults.DBF FoxUnit " + ;
"results table",16,"Please Note")
RETURN .f.
ENDIF

*
*  save these for use in THIS.SaveSettings
*
THIS.AddProperty("inDesignHeight",THIS.Height)
THIS.AddProperty("inDesignWidth",THIS.Width)

*
*  other setup tasks
*

*THIS.Icon = "FoxUnit.Ico"

*
*  add the version to THIS.Caption
*
LOCAL lcVersion
DO GetFoxUnitVersion IN FXU WITH lcVersion
*
*  MODIFY COMMAND FXU
*
THIS.Caption = THIS.Caption + " - v" + m.lcVersion

THIS.LockScreen = .t.

ENDPROC
PROCEDURE modifyclassatlinenumber
LPARAMETERS tnLineNumber

EDITSOURCE(FORCEEXT(ALLTRIM(EVALUATE(THIS.icGridRS+".TClass")),"PRG"),m.tnLineNumber)

THIS.AddProperty("ilReloadCurrentClassOnActivate",.t.)
ENDPROC
PROCEDURE movetofirsttestofnextclass
*
*  DEVNOTE
*
*  lParameters
*    tlNext (R) .T. = Next/.F. = Previous
*
LPARAMETERS tlNext

IF RECCOUNT(THIS.icGridRS) = 0
RETURN
ENDIF

LOCAL lcClassName, lnSelect, lcTag
lnSelect = SELECT(0)
SELECT (THIS.icGridRS)
lcClassName = TClass
lcTag = ORDER()

IF NOT m.tlNext
SET ORDER TO TAG (m.lcTag) DESCENDING
ENDIF

THIS.LockScreen = .t.

LOCATE REST FOR NOT UPPER(TClass) == UPPER(m.lcClassName) ;
AND Location = 1

IF EOF()
*
*  cycle around to the first/top or last/bottom
*
LOCATE
ENDIF

SET ORDER TO TAG (m.lcTag) ASCENDING

THIS.grdTests.Refresh()

SELECT (m.lnSelect)

THIS.LockScreen = .f.


ENDPROC
PROCEDURE options
*
*  this method is called from the form-level shortcut menu
*

LOCAL loForm
loForm = FXUNewObject("FXUOptionsDialog")
loForm.Show()




ENDPROC
PROCEDURE receivecompletenotification
LPARAMETERS tnTestCount, tnFailedTests, tnSuiteSuccess, tnSecondsElapsed

IF NOT USED(THIS.grdTests.RecordSource)
*  see THIS.ReceiveResultsNotification()
RETURN
ENDIF

thisform.settestsruntestsfailedlabel(tnTestcount, tnFailedTests, this.FormatSecondsElapsed(tnSecondsElapsed))

* Added so that when we run frmFxuFoxUnit::AfterRunTests() we can
* seek the first failed test in the run and set the focus on that row
* showing the failure and/or exception immediately for feedback
IF tnFailedTests &gt; 0
	this.ilTestsFailed = .t.
ELSE
	this.ilTestsFailed = .f.
ENDIF

THISFORM.grdTests.Refresh()
THISFORM.pgfDetails.pgFailuresAndErrors.edtFailuresAndErrors.Refresh()
*THISFORM.edtFailuresAndErrors.Refresh()
THISFORM.pgfDetails.pgMessages.edtMessages.Refresh()
*THISFORM.edtMessages.Refresh()


ENDPROC
PROCEDURE receiveresultnotification
LPARAMETERS toTestResult as FxuTestResult of FxuTestResult.prg

IF NOT USED(THIS.grdTests.RecordSource)
LOCAL lcText
lcText = ;
"The FXUResults.DBF table drives the grid in the " + ;
"FoxUnit form interface AND logs Failure/Error/Message " + ;
"results." + ;
CHR(13) + CHR(13) + ;
"HOWEVER, the FXUResults table has been CLOSED sometime " + ;
"during the execution of your last test!  Most likely, " + ;
"you have some code in the TearDown method that closes " + ;
"work areas indiscriminately or otherwise issues command(s) " + ;
"like CLEAR ALL/CLOSE ALL/etc." + ;
CHR(13) + CHR(13) + ;
"You need to determine where/when/why you are closing the " + ;
"FXUResults.DBF table during the execution of your test(s), " + ;
"and rememdy that behavior." + ;
CHR(13) + CHR(13) + ;
"In the meantime, the FoxUnit test harness has to shutdown " + ;
"because the grid.RecordSource cannot be 'restored' once " + ;
"it has been closed."
MESSAGEBOX(m.lcText,16,"FXUResults.DBF table is closed!")
THISFORM.Release()
RETURN
ENDIF

LOCAL loResultDAta as FxuResultData OF FxuResultData.prg

loResultData = THIS.ioResultData

loResultData.LogResult(toTestResult)

THIS.ShowProgress(toTestResult.inRunTests, toTestResult.ilCurrentResult)
=SEEK(UPPER(ALLTRIM(toTestResult.icCurrentTeSTCLASS)) + UPPER(ALLTRIM(toTestREsult.icCurrentTestName)),THIS.icGridRS,'tclname')

THIS.Refresh()

ENDPROC
PROCEDURE restoresettings
*
*  restore settings from the last time this
*  form was run
*
*  this method is called from THIS.Init()
*
THIS.AddProperty("icPersistFile",ADDBS(JUSTPATH(DBF(THIS.icGridRS)))+"FXUPersist.XML")

LOCAL lcUserID, lcCommand

lcUserID = ALLTRIM(TRANSFORM(SYS(0)))
IF LENC(m.lcUserID) &lt; 15 OR NOT "#" $ m.lcUserID
*  machine information not assigned by the network,
*  or network shell not loaded, or standalone machine
lcUserID = SPACE(0)
ELSE
*  get a user-specific filename, so each user
*  can have THEIR settings saved/restored
lcUserID = ALLTRIM(SUBSTRC(m.lcUserID,AT_C("#",m.lcUserID)+1))
ENDIF
THIS.AddProperty("icUserID",m.lcUserID)

IF FILE(THIS.icPersistFile)
TRY
XMLTOCURSOR(THIS.icPersistFile,"FoxUnitPersist",512)
*
*  apply settings for this user/developer
*
SELECT FoxUnitPersist
LOCATE
SCAN FOR UPPER(ALLTRIM(UserID)) == UPPER(ALLTRIM(THIS.icUserID))
lcCommand = ALLTRIM(Setting)
&amp;lcCommand
SELECT FoxUnitPersist
ENDSCAN
CATCH TO loException
ENDTRY
USE IN SELECT("FoxUnitPersist")
ENDIF

*
*  just in case one of the persisted settings
*  sent the grid record pointer to EOF(), or there
*  are no settings and the grid record pointer is
*  EOF() -- go to the first/top record in the
*  grid
*
IF RECCOUNT(THIS.icGridRS)&gt;0 AND EOF(THIS.icGridRS)
SELECT (THIS.icGridRS)
LOCATE
ENDIF

RETURN


ENDPROC
PROCEDURE RightClick
IF THIS.ShortcutMenuForm()
ACTIVATE POPUP pShortCut
ENDIF




ENDPROC
PROCEDURE runalltests
LOCAL lcTestClass, lcTestMethod

*
*  scroll the grid to the top
*
IF thisform.ilReloadTestsOnRun
	this.ioResultData.ReloadTestCaseClasses()
ENDIF

SELECT (THIS.icGridRS)
LOCATE
THIS.grdTests.Refresh()

* Select the test class and test name for all tests currently
* loaded into the result table, ordered by class name and test name
* into a cursor to be added into the testsuite
*	SELECT TClass, TName FROM (THIS.icGridRS)  ;
*		ORDER BY TClass, TName ;
*		INTO CURSOR Curs_TestSuite

* Declare and Insantiate TestSuite
LOCAL loTestSuite as FxuTestSuite OF FxuTestSuite.prg
loTestSuite = FxuNewObject("FxuTestSuite")
loTestSuite.ilAllowDebug = thisform.IlAllowDebug

* Load the tests into the testsuite
SELECT (THIS.icGridRs)
GO TOP

SCAN
	lcTestClass = ALLTRIM(tclass)
	lcTestMethod = ALLTRIM(tname)
	IF NOT THIS.SeeIfTestClassPRGExists(m.lcTestClass)
*
*  skip the rest of the tests in this missing test class
*
	  SCAN WHILE ALLTRIM(TClass) == m.lcTestClass
	  ENDSCAN
	  IF NOT EOF()
	    *
	    *  go back one record, because there is an
	    *  implicit SKIP in the ENDSCAN
	    *
	    SKIP -1
	  ENDIF
ELSE
	  loTestSuite.AddTest(lcTestClass, lcTestMethod)
	ENDIF
ENDSCAN

* Assign the result object to the TestSuite
loTestSuite.ioTestResult = THIS.ioTestResult

* Bind Events to the results events in the TestSuite
BINDEVENT(loTestSuite,'Event_OneTestComplete',Thisform,'Receiveresultnotification')
BINDEVENT(loTestSuite,'Event_AllTestsComplete',ThisForm,'ReceiveCompleteNotification')

* Set the progress of this form to it's initial values for running
* this TestSuite
THIS.SetProgress(loTestSuite.inTestCount)

* Run all of the tests in the TestSuite
loTestSuite.RunTests()

UNBINDEVENTS(loTestSuite)

IF thisform.ilCloseDebuggerAtEndOfTestsRun
	CLOSE DEBUGGER
ENDIF

SELECT (THIS.icGridRS)
LOCATE

THIS.AfterRunTests()


ENDPROC
PROCEDURE runclasstests
LPARAMETERS tcTestClass &amp;&amp; name of class who's tests we will run

LOCAL lcTClass
lcTClass = UPPER(EVALUATE(THIS.icGridRS+".TClass"))

IF NOT THIS.SeeIfTestClassPRGExists(m.lcTClass)
RETURN
ELSE
	IF this.ilReloadTestsOnRun
		this.ioResultData.ReloadTestCaseClass(m.lcTClass)
		LOCATE FOR UPPER(tclass) = lcTClass
	ENDIF
ENDIF

* Select all test names from the THIS.icGridRS table that
* belong to the test class passed
*	SELECT tname FROM (THIS.icGridRS) WHERE tclass == tcTestClass ;
*		ORDER BY tname ;
*		INTO CURSOR Curs_TestSuite
	
tcTestClass = ALLTRIM(tcTestClass)

* Declare and Insantiate TestSuite
LOCAL loTestSuite as FxuTestSuite OF FxuTestSuite.prg
loTestSuite = FxuNewObject("FxuTestSuite")
loTestSuite.ilAllowDebug = thisform.IlAllowDebug

* Load the tests into the testsuite
* SELECT Curs_TestSuite

SELECT (this.icGridRs)
GO top

SCAN FOR UPPER(ALLTRIM(tclass)) == UPPER(ALLTRIM(tcTestClass))
	loTestSuite.AddTest(tcTestClass, ALLTRIM(tname))
ENDSCAN

* Assign the result object to the TestSuite
loTestSuite.ioTestResult = thisform.ioTestResult

* Bind Events to the results events in the TestSuite
BINDEVENT(loTestSuite,'Event_OneTestComplete',Thisform,'Receiveresultnotification')
BINDEVENT(loTestSuite,'Event_AllTestsComplete',ThisForm,'ReceiveCompleteNotification')


* Set the progress of this form to it's initial values for running
* this TestSuite
ThisForm.SetProgress(loTestSuite.inTestCount)

* Run all of the tests in the TestSuite
loTestSuite.RunTests()

UNBINDEVENTS(loTestSuite)

IF thisform.ilCloseDebuggerAtEndOfTestsRun
	CLOSE DEBUGGER
ENDIF


SELECT (THIS.icGridRS)
*
*  reposition the record pointer on the first
*  test for the class
*
LOCATE FOR UPPER(TClass) == m.lcTClass

THIS.AfterRunTests()
ENDPROC
PROCEDURE runonetest
LPARAMETERS tcTestClass, tcTestMethod

SELECT (THIS.icGridRS)
LOCAL lcTClass, lcTName
lcTClass = UPPER(EVALUATE(THIS.icGridRS+".TClass"))
lcTName = UPPER(EVALUATE(THIS.icGridRS+".TName"))

IF NOT THIS.SeeIfTestClassPRGExists(m.lcTClass)
RETURN
ENDIF

* Declare and Insantiate TestSuite
LOCAL loTestSuite as FxuTestSuite OF FxuTestSuite.prg
loTestSuite = FxuNewObject("FxuTestSuite")
loTestSuite.ilAllowDebug = thisform.IlAllowDebug

* Add this one test to the test suite
loTestSuite.AddTest(tcTestClass,tcTestMethod)

* Assign the result object to the TestSuite
loTestSuite.ioTestResult = thisform.ioTestResult

* Bind Events to the results events in the TestSuite
BINDEVENT(loTestSuite,'Event_OneTestComplete',Thisform,'Receiveresultnotification')
BINDEVENT(loTestSuite,'Event_AllTestsComplete',ThisForm,'ReceiveCompleteNotification')

* Set the progress of this form to it's initial values for running
* this TestSuite
ThisForm.SetProgress(loTestSuite.inTestCount)

* Run all of the tests in the TestSuite
loTestSuite.RunTests()

UNBINDEVENTS(loTestSuite)

IF thisform.ilCloseDebuggerAtEndOfTestsRun
	CLOSE DEBUGGER
ENDIF


IF NOT USED(THIS.grdTests.RecordSource)
*  see THIS.ReceiveResultsNotification()
RETURN
ENDIF

* JDE 03/14/2005 Added to replace code originally below
* This.AfterRunTests() to resolve defect of last test
* not being reselected and being the grid's (windows)
* selected color rather than green as reported
* in an internal defect report at Visionpace
LOCATE FOR UPPER(TClass) == m.lcTClass AND UPPER(TName) == m.lcTName

THIS.AfterRunTests()

*  when running one test, always return to
*  that test
* commented out as per comment above locate statement
*SELECT (THIS.icGridRS)
*=SEEK(m.lcTClass+m.lcTName,THIS.icGridRS,"TCLName")

ENDPROC
PROCEDURE savesettings
*
*  save settings so they can be restored the next
*  time this form is run (see THIS.Init() call to
*  THIS.RestoreSettings() method)
*
*  this method is called from THIS.Destroy()
*

LOCAL loPersistVariables

IF NOT USED(THIS.grdTests.RecordSource)
*  see THIS.ReceiveResultsNotification()
RETURN
ENDIF

TRY

IF FILE(THIS.icPersistFile)
XMLTOCURSOR(THIS.icPersistFile,"FoxUnitPersist",512)
ELSE
CREATE CURSOR FoxUnitPersist (UserID C(10), Setting M)
ENDIF
SELECT FoxUnitPersist
*
*  delete all the existing settings for this user
*
DELETE ALL FOR UPPER(ALLTRIM(UserID)) == UPPER(ALLTRIM(THIS.icUserID))
SCATTER NAME loPersistVariables MEMO
loPersistVariables.UserID = THIS.icUserID

loPersistVariables.Setting = "THIS.Top = " + TRANSFORM(THIS.Top)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
loPersistVariables.Setting = "THIS.Left = " + TRANSFORM(THIS.Left)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
loPersistVariables.Setting = "THIS.Height = IIF(VERSION(5)&gt;=900," + TRANSFORM(THIS.Height) + "," + TRANSFORM(THIS.inDesignHeight) + ")"
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
loPersistVariables.Setting = "THIS.Width = IIF(VERSION(5)&gt;=900," + TRANSFORM(THIS.Width) + "," + TRANSFORM(THIS.inDesignWidth) + ")"
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables

loPersistVariables.Setting = "THIS.inZoomTop = " + TRANSFORM(THIS.inZoomTop)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
loPersistVariables.Setting = "THIS.inZoomLeft = " + TRANSFORM(THIS.inZoomLeft)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
loPersistVariables.Setting = "THIS.inZoomHeight = " + TRANSFORM(THIS.inZoomHeight)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
loPersistVariables.Setting = "THIS.inZoomWidth = " + TRANSFORM(THIS.inZoomWidth)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
loPersistVariables.Setting = "THIS.inZoomWindowState = " + TRANSFORM(THIS.inZoomWindowState)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables

loPersistVariables.Setting = "THIS.pgfDetails.ActivePage = " + TRANSFORM(THIS.pgfDetails.ActivePage)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables

*
*  font settings
*
loPersistVariables.Setting = [THIS.grdTests.FontName = "] + TRANSFORM(THIS.grdTests.FontName) + ["]
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
loPersistVariables.Setting = "THIS.grdTests.FontSize = " + TRANSFORM(THIS.grdTests.FontSize)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
loPersistVariables.Setting = "THIS.grdTests.FontBold = " + TRANSFORM(THIS.grdTests.FontBold)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
loPersistVariables.Setting = "THIS.grdTests.FontItalic = " + TRANSFORM(THIS.grdTests.FontItalic)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
LOCAL loPage, loControl
FOR EACH loPage IN THIS.pgfDetails.Pages
loPersistVariables.Setting = [THIS.pgfDetails.] + loPage.Name + [.FontName = "] + TRANSFORM(loPage.FontName) + ["]
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
loPersistVariables.Setting = "THIS.pgfDetails." + loPage.Name + ".FontSize = " + TRANSFORM(loPage.FontSize)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
loPersistVariables.Setting = "THIS.pgfDetails." + loPage.Name + ".FontBold = " + TRANSFORM(loPage.FontBold)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
loPersistVariables.Setting = "THIS.pgfDetails." + loPage.Name + ".FontItalic = " + TRANSFORM(loPage.FontItalic)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
FOR EACH loControl IN loPage.Controls
loPersistVariables.Setting = [THIS.pgfDetails.] + loPage.Name + "." + loControl.Name + [.FontName = "] + TRANSFORM(loControl.FontName) + ["]
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
loPersistVariables.Setting = "THIS.pgfDetails." + loPage.Name + "." + loControl.Name + ".FontSize = " + TRANSFORM(loControl.FontSize)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
loPersistVariables.Setting = "THIS.pgfDetails." + loPage.Name + "." + loControl.Name + ".FontBold = " + TRANSFORM(loControl.FontBold)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
loPersistVariables.Setting = "THIS.pgfDetails." + loPage.Name + "." + loControl.Name + ".FontItalic = " + TRANSFORM(loControl.FontItalic)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
ENDFOR
ENDFOR
loPage = .NULL.
loControl = .NULL.

*
*  grid.Height
*
loPersistVariables.Setting = "THIS.ilLargeGrid=" + TRANSFORM(THIS.ilLargeGrid)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables

*
*  each grid.Column.Width
*
LOCAL loColumn
FOR EACH loColumn IN THIS.grdTests.Columns
loPersistVariables.Setting = ;
"THIS.grdTests." + loColumn.Name + ".Width = " + ;
TRANSFORM(loColumn.Width)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables
ENDFOR

*
*  indeg tag for the grid cursor
*
loPersistVariables.Setting = "SET ORDER TO TAG " + ORDER(THIS.icGridRS) + " IN (THIS.icGridRS)"
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables

*
*  record pointer in the grid
*
loPersistVariables.Setting = [=SEEK("] + ;
UPPER(EVALUATE(THIS.icGridRS+".TClass")) + ;
UPPER(EVALUATE(THIS.icGridRS+".TName")) + ;
[",THIS.icGridRS,"TCLName")]
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables


*********************************************************
*
*  Options... settings
*
*********************************************************
loPersistVariables.Setting = "THIS.ilAllowDebug = " + TRANSFORM(THIS.ilAllowDebug)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables

loPersistVariables.Setting = "THIS.ShowTips = " + TRANSFORM(THIS.ShowTips)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables

loPersistVariables.Setting = "THIS.ilHonorTestPrefix = " + TRANSFORM(this.ilHonorTestPrefix)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables

loPersistVariables.Setting = "THIS.ilReloadTestsOnRun = " + TRANSFORM(THIS.ilReloadTestsOnRun)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables

loPersistVariables.Setting = "THIS.ilCloseDebuggerAtEndOfTestsRun = " + TRANSFORM(THIS.ilCloseDebuggerAtEndOfTestsRun)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables

CURSORTOXML("FoxUnitPersist",THIS.icPersistFile,1,512,0,"1")

CATCH TO loException
ENDTRY

USE IN SELECT("FoxUnitPersist")

IF VARTYPE(m.loException) = "O"
MESSAGEBOX("Unable to save user settings because " + ;
CHR(13) + ;
loException.Message, ;
48, ;
"Please Note")
ENDIF

RETURN

ENDPROC
PROCEDURE seeiftestclassprgexists
LPARAMETERS tcTClass

IF NOT FILE(FORCEEXT(ALLTRIM(m.tcTClass),"PRG"))
MESSAGEBOX("Unable to locate " + FORCEEXT(ALLTRIM(m.tcTClass),"PRG") + ", " + ;
"likely because it has been moved, erased, or renamed." + ;
CHR(13) + CHR(13) + ;
"You should likely remove it from the list, " + ;
"by selecting any of its tests and then clicking " + ;
"the &lt;Remove Selected&gt; button.", ;
16, ;
"Please Note")
RETURN .f.
ENDIF

RETURN .t.

ENDPROC
PROCEDURE setallowdebug
LPARAMETERS tnAllowDebug

IF tnAllowDebug = 1
	thisform.ilAllowDebug = .t.
ELSE
	thisform.ilAllowDebug = .f.
ENDIF

ENDPROC
PROCEDURE setprogress
LPARAMETERS tnMaxValue

UPDATE (THIS.icGridRS) SET trun = .f.

thisform.pbProgress.SetRange(0,tnMaxValue)
thisform.pbProgress.SetValue(0)


thisform.pbProgress.shpbar.BackColor = thisform.inColorPass
thisform.pbProgress.Refresh
ENDPROC
PROCEDURE settestsruntestsfailedlabel
LPARAMETERS tnTestsRun, tnTestsFailed, tcTimeElapsed

LOCAL lcTestsRun, lcTestsFailed, lcMessage, lcTestsPassed



lcTestsRun = ALLTRIM(TRANSFORM(tnTestsRun, '999,999'))
lcTestsFailed = ALLTRIM(TRANSFORM(tnTestsFailed, '999,999'))
lcTestsPassed = ALLTRIM(TRANSFORM(tnTestsRun - tnTestsFailed, '999,999'))

lcMessage = ;
lcTestsRun + ;
IIF(tnTestsRun &lt;&gt; 1, ' tests were run.  ', ' test was run.  ') + ;
lcTestsPassed + ;
IIF((tnTestsRun - tnTestsFailed) &lt;&gt; 1, ' tests passed.  ', ' test passed.  ') + ;
lcTestsFailed + ;
IIF(tnTestsFailed &lt;&gt; 1, ' tests failed.  ', ' test failed.  ')

IF NOT EMPTY(tcTimeElapsed)
lcMessage = lcMessage + 'Elapsed Time: ' + tcTimeElapsed
ENDIF

THISFORM.lblTestsRunTestsFailed.CAPTION = lcMessage

RETURN


ENDPROC
PROCEDURE shellshortcutmenueditbox
*
*  this is a shell method called from THIS.ShortcutMenuEditbox()
*  ... adjust the editbox-level shortcut menu as you wish...
*
ENDPROC
PROCEDURE shellshortcutmenuform
*
*  this is a shell method called from THIS.ShortcutMenuForm()
*  ... adjust the form-level shortcut menu as you wish...
*
ENDPROC
PROCEDURE shellshortcutmenugrid
*
*  this is a shell method called from THIS.ShortcutMenuGrid()
*  ... adjust the grid-level shortcut menu as you wish...
*
ENDPROC
PROCEDURE shortcutmenueditbox
*
*  called the 2 editboxes on the pageframe, this separate
*  method allows subclassing this method and modifying
*  the shortcut menu before THIS.RightClick() issues
*  the ACTIVATE POPUP
*
*  or, you can adjust items by augmenting/overriding
*  the individual methods where shortcut options
*  are added
*
*  and, you can adjust the menu in THIS.ShellShortcutMenuForm(),
*  called here before the final option is added to the
*  shortcut menu
*

LPARAMETERS toControl

DEFINE POPUP pShortCut IN WINDOW (THIS.Name) SHORTCUT RELATIVE FROM MROW(THIS.Name),MCOL(THIS.Name)

IF UPPER(toControl.Name) = UPPER("edtFailuresAndErrors")
*
*  find the first line that contains a line
*  containing
*  "line nnn of"
*
LOCAL laLines[1], xx, lcLine, lnLine, lcLineNumber, lcOnSel, ;
lcOF
lcOF = " OF " + UPPER(ALLTRIM(EVALUATE(THIS.icGridRS+".TName")))
lnLine = 0
ALINES(laLines,toControl.Value)
FOR xx = 1 TO ALEN(laLines,1)
lcLine = UPPER(laLines[m.xx])
IF " LINE " $ m.lcLine ;
AND m.lcOF $ m.lcLine ;
AND AT_C(m.lcOF,m.lcLine) &gt; AT_C(" LINE ",m.lcLine)
lnLine = m.xx
EXIT
ENDIF
ENDFOR
IF m.lnLine &gt; 0
lcLine = ALLTRIM(SUBSTRC(m.lcLine,AT_C(" LINE ",m.lcLine)))
IF RIGHTC(m.lcLine,1) = "."
lcLine = LEFTC(m.lcLine,LENC(m.lcLine)-1)
ENDIF
lcLineNumber = GETWORDNUM(m.lcLine,2,SPACE(1))
DEFINE BAR 1 OF pShortcut PROMPT "Edit " + m.lcLine
lcOnSel = "ON SELECTION BAR 1 OF pShortCut _Screen.ActiveForm.ModifyClassAtLineNumber(" + m.lcLineNumber + ")"
&amp;lcOnSel
DEFINE BAR 2 OF pShortcut PROMPT "\-"
ENDIF
ENDIF

THIS.inBar = 10

THIS.AddShortcutOption_FormFont()
THIS.AddShortcutOption_FormResetfont()
THIS.AddShortcutOption_Separator

THIS.AddShortcutOption_DetailsPrint()
THIS.AddShortcutOption_DetailsZoom()

THIS.ShellShortcutMenuEditbox()


ENDPROC
PROCEDURE shortcutmenuform
*
*  called from THIS.RightClick(), this separate method
*  allows subclassing this method and modifying
*  the shortcut menu before THIS.RightClick() issues
*  the ACTIVATE POPUP
*
*  or, you can adjust items by augmenting/overriding
*  the individual methods where shortcut options
*  are added
*
*  and, you can adjust the menu in THIS.ShellShortcutMenuForm(),
*  called here before the final option is added to the
*  shortcut menu
*

THIS.inBar = 10

DEFINE POPUP pShortCut IN WINDOW (THIS.Name) SHORTCUT RELATIVE FROM MROW(THIS.Name),MCOL(THIS.Name)

*!*	THIS.AddShortcutOption_RunTestsAll()
*!*	THIS.AddShortcutOption_RunTestsClass()
*!*	THIS.AddShortcutOption_RunTestSelected()
*!*	THIS.AddShortcutOption_Separator()

*!*	THIS.AddShortcutOption_ClassNew()
*!*	THIS.AddShortcutOption_ClassLoad()
*!*	THIS.AddShortcutOption_ClassAddtest()
*!*	THIS.AddShortcutOption_Separator()

*!*	THIS.AddShortcutOption_SelectedRemove()
*!*	THIS.AddShortcutOption_SelectedReload()
*!*	THIS.AddShortcutOption_SelectedModify()
*!*	THIS.AddShortcutOption_Separator()

THIS.AddShortcutOption_FormFont()
THIS.AddShortcutOption_FormResetfont()

THIS.AddShortcutOption_Separator()
THIS.AddShortcutOption_FormOptions()

THIS.AddShortcutOption_Separator()
THIS.AddShortcutOption_FormAcknowledgements()
THIS.AddShortcutOption_FormLicense()

THIS.ShellShortcutMenuForm()

THIS.AddShortcutOption_Separator()
THIS.AddShortcutOption_FormClose()


ENDPROC
PROCEDURE shortcutmenugrid
*
*  called from THIS.grdTests.RightClick(), this separate method
*  allows subclassing this method and modifying
*  the shortcut menu before THIS.RightClick() issues
*  the ACTIVATE POPUP
*
*  or, you can adjust items by augmenting/overriding
*  the individual methods where shortcut options
*  are added
*
*  and, you can adjust the menu in THIS.ShellShortcutMenuForm(),
*  called here before the final option is added to the
*  shortcut menu
*

THIS.inBar = 10

DEFINE POPUP pShortCut IN WINDOW (THIS.Name) SHORTCUT RELATIVE FROM MROW(THIS.Name),MCOL(THIS.Name)

*!*	THIS.AddShortcutOption_RunTestsAll()
*!*	THIS.AddShortcutOption_RunTestsClass()
*!*	THIS.AddShortcutOption_RunTestSelected()
*!*	THIS.AddShortcutOption_Separator()

*!*	THIS.AddShortcutOption_ClassNew()
*!*	THIS.AddShortcutOption_ClassLoad()
*!*	THIS.AddShortcutOption_ClassAddtest()
*!*	THIS.AddShortcutOption_Separator()

*!*	THIS.AddShortcutOption_SelectedRemove()
*!*	THIS.AddShortcutOption_SelectedReload()
*!*	THIS.AddShortcutOption_SelectedModify()
*!*	THIS.AddShortcutOption_Separator()

THIS.AddShortcutOption_FormFont()
THIS.AddShortcutOption_FormResetfont()
THIS.AddShortcutOption_Separator()

THIS.AddShortcutOption_GridResetColumnWidths()
THIS.addShortcutOption_GridSize()
THIS.AddShortcutOption_Separator()

THIS.AddShortcutOption_GridSortByLocation()
THIS.AddShortcutOption_GridSortByName()

THIS.ShellShortcutMenuGrid()


ENDPROC
PROCEDURE showprogress
LPARAMETERS tnTestsRun, tlSuccess

IF EMPTY(m.tlSuccess)
	tlFailed = .t.
ELSE
	IF NOT VARTYPE(m.tlSuccess) = "L"
		tlSuccess = .t.
	ENDIF
ENDIF

IF NOT m.tlSuccess
	THIS.pbProgress.shpBar.BackColor = THIS.inColorFail
ENDIF

THIS.pbProgress.SetValue(m.tnTestsRun)
ENDPROC
PROCEDURE underconstruction
MESSAGEBOX("This feature is under construction", ;
48,"Please Note")

ENDPROC
PROCEDURE Unload
*
*  see THIS.Deactivate()
*
RELEASE PAD pFoxUnit OF _MSYSMENU

*
*  this form is instantiated to this public
*  variable in FXU.PRG, so RELEASE it now
*  that this form is about dead
*
RELEASE goFoxUnitTestBroker &amp;&amp; FXU/JDE 07/01/2004 Added release for goFoxUnitTestBroker
RELEASE goFoxUnitForm
ENDPROC
PROCEDURE updatecurrentgridrowcolor
LOCAL lnBackColor
lnBackColor = ;
THIS.CalculateRowColor(EVALUATE(THIS.grdTests.RecordSource+".Success"), ;
EVALUATE(THIS.grdTests.RecordSource+".TRun"))
IF m.lnBackColor = THIS.inColorNotRun
THIS.grdTests.HighlightBackColor = THIS.grdTests.SelectedItemBackColor
ELSE
THIS.grdTests.HighlightBackColor = m.lnBackColor
ENDIF


ENDPROC
PROCEDURE zreadme
#IF .f.

Class:  FXU.VCX/frmFoxUnit

If you want to change this FoxUnit interface, your
best bet is to:
1- Subclass this form class
2- Open the \FoxUnit\FXUClassFactory.DBF and update
the ClassName and ClassLib fields:
REPLACE ClassName, ClassLib WITH ;
"YourSubclassName", "YourSubclassClassLibrary.VCX" ;
WHERE UPPER(ALLTRIM(ClassID)) == UPPER("FoxUnitForm")
...whereupon your subclass of this form is instantiated
rather than this form when this line of code in FXU.PRG
executes:
	goFoxUnitForm = FXUNewObject("FoxUnitForm")



********************************************
*  VDSI notes and action items
********************************************

Action items for Drew:
========================================
THIS.Options()
FXUOptions.XML
Include the UserID, like FXUPersist.XML
Add the dialog to FXUClassFactory.DBF
	Persist font setting?
	Persist editbox Zoom size?
	ShowTips
	CLOSE DEBUGGER subsequent to running tests

ER submitted by Lauren Clarke on the FoxUnit message board:
-----------------------------------------------------------
I like the class/name filters, but would use them even more
if they were combo-box based rather than text box with the
last 5 filters handy in the drop-down for re-application.
You could add a default "no filter" option to each and remove
the "Clear filter" button.

ER submitted by Lauren Clarke on the FoxUnit message board:
-----------------------------------------------------------
The grid and messages could share reasonable (configurable?)
proportions of the vertical realestate.
To make more fluid, consider using a browser control for the
Failures and Errors/Messages. Then a horizontal divider could
be used to control the relative sizes of the grid and message
display area. Also, with a browser agent in place, we open
the door to customized scripts (xslt or other) to determine
the layout of the errors and messages.

ER submitted by Lauren Clarke on the FoxUnit message board:
-----------------------------------------------------------
Allow option to halt on first failure in UI

ER submitted by Sietse Wijnker on the FoxUnit Message board (09/10/2004)
-----------------------------------------------------------
Make captions of Errors/Failures and Messages pageframes
bold when selecting a test that has non-empty memo fields
Suggest adding the following lines to the
frmFxuFoxunit::Afterruntests() method
*	This.pgfDetails.pgFailuresAndErrors.FontBold = ;
*		NOT EMPTY(THIS.pgfDetails.pgFailuresAndErrors.edtFailuresAndErrors.text)
*	This.pgfDetails.pgMessages.FontBold = ;
*		NOT EMPTY(THIS.pgfDetails.pgMessages.edtMessages.text)
beneath the refresh() calls of the edit-boxes

ER submitted by Andrew Ross McNeil on the FoxUnit Message board (08/21/2004):
-----------------------------------------------------------
Allow creation of test classes from existing classes:
CREATE a form that allows a user to select an existing class.
This will populate a grid with all of public methods
from the class with checkboxes. Each method checked would
be used to create a stub test class for the class
selected.

#ENDIF

ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1>Class</reserved1>
		<reserved2>31</reserved2>
		<reserved3>incolorpass Green color property used for setting green "pass" color to grid rows and test running status bar
incolornotrun Background color definition for grid rows of tests that weren't run yet, or not run during the last test pass
incolorfail Red Color for background color of rows in test grid for tests that failed and the test run progress bar when tests have failed.
iotestbroker Object That decouples the test data session from the foxUnit datasession, enabling tests to run without conflicting with the datasession storing the results.
iotestresult Class level test result object. Passed to testbroker when running tests. Instantiated when the form is instantiated.
ilallowdebug
ioresultdata Results Data Object, controls the test results table and allows update loggin to the table
inmostrecentselectedrow
icgridrs THIS.grdTests.RecordSource
ilinitialentry
_memberdata XML Metadata for customizable properties
inbar
inzoomtop
inzoomleft
inzoomheight
inzoomwidth
inzoomwindowstate
icclassfilter
icnamefilter
ilhonortestprefix
ilreloadtestsonrun
iltestsfailed
ilclosedebuggeratendoftestsrun
*calculaterowcolor Calculates the correct RGB value row color for a test row (grey = not tested, red = falied, green = succeeded)
*runalltests runs all tests in all test classes that are currently loaded into the thisform.icGridRs table
*runonetest Runs the one test who's row is currently selected in the grid
*showprogress Sets the value of the test progress bar as well as the color for pass or fail
*setprogress sets progress bar back to no tests run status
*runclasstests Runs all tests for the class specified
*settestsruntestsfailedlabel 
*setallowdebug 
*receiveresultnotification Recieves results of the current test
*receivecompletenotification 
*zreadme 
*updatecurrentgridrowcolor 
*formatsecondselapsed 
*restoresettings 
*savesettings 
*afterruntests 
*underconstruction 
*addshortcutoption_runtestselected 
*addshortcutoption_runtestsclass 
*addshortcutoption_runtestsall 
*addshortcutoption_classnew 
*addshortcutoption_classload 
*addshortcutoption_classaddtest 
*addshortcutoption_selectedremove 
*addshortcutoption_selectedreload 
*addshortcutoption_selectedmodify 
*addshortcutoption_separator 
*addshortcutoption_gridsize 
*addshortcutoption_gridresetcolumnwidths 
*addshortcutoption_formfont 
*addshortcutoption_formoptions 
*addshortcutoption_formclose 
*addshortcutoption_formacknowledgements 
*addshortcutoption_formlicense 
*addshortcutoption_detailszoom 
*shortcutmenuform 
*shortcutmenugrid 
*shortcutmenueditbox 
*shellshortcutmenuform 
*shellshortcutmenugrid 
*shellshortcutmenueditbox 
*addshortcutoption_formresetfont 
*formfont 
*formresetfont 
*options 
*acknowledgements 
*license 
*gridsize 
*gridresetcolumnwidths 
*detailszoom 
*detailsprint 
*addshortcutoption_detailsprint 
*addshortcutoption_gridsortbylocation 
*addshortcutoption_gridsortbyname 
*gridsortbyname 
*gridsortbylocation 
*movetofirsttestofnextclass 
*applyfilter 
*getfiltertooltiptext 
*seeiftestclassprgexists 
*modifyclassatlinenumber 
</reserved3>
		<reserved4/>
		<reserved5/>
		<reserved6>Pixels</reserved6>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3TS</uniqueid>
		<timestamp>846149165</timestamp>
		<class>pageframe</class>
		<classloc/>
		<baseclass>pageframe</baseclass>
		<objname>pgfDetails</objname>
		<parent>frmfoxunit</parent>
		<properties>ErasePage = .T.
PageCount = 2
Top = 272
Left = 8
Width = 708
Height = 148
TabIndex = 11
Name = "pgfDetails"
Page1.Caption = "\&lt;Failures and Errors"
Page1.Name = "pgFailuresAndErrors"
Page2.Caption = "Messa\&lt;ges"
Page2.Name = "pgMessages"
</properties>
		<protected/>
		<methods>PROCEDURE Init
IF NOT DODEFAULT()
RETURN .F.
ENDIF

IF VERSION(5)&gt;=900
*
*   16 = Top Relative
*    2 = Left Absolute
*  128 = Right Relative
*   64 = Bottom Relative
*
THIS.Anchor = 16 + 2 + 128 + 64
ENDIF
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3TV</uniqueid>
		<timestamp>846118119</timestamp>
		<class>editbox</class>
		<classloc/>
		<baseclass>editbox</baseclass>
		<objname>edtFailuresAndErrors</objname>
		<parent>frmfoxunit.pgfDetails.pgFailuresAndErrors</parent>
		<properties>FontName = "Tahoma"
Height = 106
Left = 7
ReadOnly = .T.
TabIndex = 2
Top = 8
Width = 688
ControlSource = ""
IntegralHeight = .T.
Name = "edtFailuresAndErrors"
</properties>
		<protected/>
		<methods>PROCEDURE Init
IF NOT DODEFAULT()
RETURN .F.
ENDIF

THIS.ControlSource = THISFORM.icGridRS + ".Fail_Error"

IF VERSION(5)&gt;=900
*
*   16 = Top Relative
*    2 = Left Absolute
*  128 = Right Relative
*   64 = Bottom Relative
*
THIS.Anchor = 16 + 2 + 128 + 64
ENDIF

ENDPROC
PROCEDURE RightClick
IF THISFORM.ShortcutMenuEditBox(THIS)
ACTIVATE POPUP pShortCut
ENDIF

ENDPROC
PROCEDURE UIEnable
LPARAMETERS lEnable

IF m.lEnable
THIS.Refresh()
ENDIF

ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3TY</uniqueid>
		<timestamp>846118119</timestamp>
		<class>editbox</class>
		<classloc/>
		<baseclass>editbox</baseclass>
		<objname>edtMessages</objname>
		<parent>frmfoxunit.pgfDetails.pgMessages</parent>
		<properties>FontName = "Tahoma"
Height = 106
Left = 7
ReadOnly = .T.
TabIndex = 3
Top = 8
Width = 688
ControlSource = ""
IntegralHeight = .T.
Name = "edtMessages"
</properties>
		<protected/>
		<methods>PROCEDURE Init
IF NOT DODEFAULT()
RETURN .f.
ENDIF

THIS.ControlSource = THISFORM.icGridRS + ".Messages"

IF VERSION(5)&gt;=900
*
*   16 = Top Relative
*    2 = Left Absolute
*  128 = Right Relative
*   64 = Bottom Relative
*
THIS.Anchor = 16 + 2 + 128 + 64
ENDIF
ENDPROC
PROCEDURE RightClick
IF THISFORM.ShortcutMenuEditbox(THIS)
ACTIVATE POPUP pShortCut
ENDIF

ENDPROC
PROCEDURE UIEnable
LPARAMETERS lEnable

IF m.lEnable
THIS.Refresh()
ENDIF

ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1940HURHU</uniqueid>
		<timestamp>846149165</timestamp>
		<class>shape</class>
		<classloc/>
		<baseclass>shape</baseclass>
		<objname>shpButtons</objname>
		<parent>frmfoxunit</parent>
		<properties>Top = 0
Left = 0
Height = 44
Width = 724
BackStyle = 0
SpecialEffect = 0
Name = "shpButtons"
</properties>
		<protected/>
		<methods>PROCEDURE Init
IF NOT DODEFAULT()
RETURN .F.
ENDIF

THIS.Top = 1
THIS.Left = 1
THIS.Width = THISFORM.Width-1
THIS.Height = 44

ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3SG</uniqueid>
		<timestamp>846118119</timestamp>
		<class>grid</class>
		<classloc/>
		<baseclass>grid</baseclass>
		<objname>grdTests</objname>
		<parent>frmfoxunit</parent>
		<properties>ColumnCount = 2
FontName = "Tahoma"
DeleteMark = .F.
Height = 183
Left = 8
Panel = 1
ReadOnly = .T.
ScrollBars = 2
TabIndex = 10
Top = 76
Width = 708
HighlightStyle = 2
Name = "grdTests"
Column1.FontBold = .F.
Column1.FontName = "Tahoma"
Column1.Width = 208
Column1.ReadOnly = .T.
Column1.BackColor = 255,255,255
Column1.Name = "Column1"
Column2.FontBold = .F.
Column2.FontName = "Tahoma"
Column2.Width = 466
Column2.ReadOnly = .T.
Column2.BackColor = 255,255,255
Column2.Name = "Column2"
</properties>
		<protected/>
		<methods>PROCEDURE AfterRowColChange
LPARAMETERS nColIndex

THIS.Column2.Header1.Caption = ;
"Test name (" + ALLTRIM(EVALUATE(THIS.RecordSource+".TClass")) + "::" + ALLTRIM(EVALUATE(this.RecordSource+".TName") +")")

THISFORM.AfterRunTests(.t.)



ENDPROC
PROCEDURE BeforeRowColChange
LPARAMETERS nColIndex

THISFORM.inMostRecentSelectedRow = THIS.ActiveRow

ENDPROC
PROCEDURE DblClick
THISFORM.cmdModifySelected.Click()
ENDPROC
PROCEDURE Init
*
*  set THIS.HighlightBackColor to the SelectedItems
*  color set in Windows on this machine
*
THIS.HighlightBackColor = THIS.SelectedItemBackColor

*
*  gray BackColor
*
THIS.BackColor = THISFORM.inColorNotRun

*
*  basic setup
*

THIS.RecordSource = THISFORM.icGridRS

*!*	THIS.Column1.ControlSource = THIS.RecordSource + ".TClass"
*!*	THIS.Column1.ControlSource = ;
*!*	     [IIF(FXUResults.Location=1,FXUResults.TClass,SPACE(4)+FXUResults.TClass)]
*!*	THIS.Column1.ControlSource = ;
*!*	     [IIF(] + THIS.RecordSource + [.Location=1,] + THIS.RecordSource + [.TClass,SPACE(5)+] + THIS.RecordSource + [.TClass)]
*!*	THIS.Column1.ControlSource = ;
*!*	     [IIF(ORDER("FXUResults")="TCLOC" AND NOT FXUResults.Location=1,SPACE(4)+FXUResults.TClass,FXUResults.TClass)]
*
*  indent each test after the first one, within each
*  test class .PRG
*
THIS.Column1.ControlSource = ;
[IIF(ORDER("] + THIS.RecordSource + [")="TCLOC" AND NOT ] + THIS.RecordSource + [.Location=1,SPACE(4)+] + THIS.RecordSource + [.TClass,] + THIS.RecordSource + [.TClass)]

THIS.Column2.ControlSource = THIS.RecordSource + ".TName"

*
*  format THIS.Column3 to H:MM:SS.nnn
*
*	LOCAL lcString
*	lcString = ;
*	     "TRANSFORM(INT("+THIS.RecordSource+".TElapsed/(60*60))) + ':' + " + ;
*	     "PADL(INT("+THIS.RecordSource+".TElapsed/60),2,'0') + ':' + " + ;
*	     "PADL(MOD(INT("+THIS.RecordSource+".TElapsed),60),2,'0') + '.' + " + ;
*	     "RIGHTC(STR("+THIS.RecordSource+".TElapsed,10,3),3)"
*	THIS.Column3.ControlSource = "(" + m.lcString + ")"

*
*  other setup
*

THIS.AllowCellSelection = .f.
THIS.GridLines = 0

THIS.SetAll("DynamicBackColor","THISFORM.CalculateRowColor(Success,TRun)","Column")

THIS.SetAll("DynamicFontItalic",[NOT FILE(FORCEEXT(ALLTRIM(FXUResults.TClass),"PRG"))],"Column")

THIS.SetAll("Movable",.f.,"Column")

THIS.ToolTipText = ;
"Shortcut menu available" + ;
CHR(13) + CHR(13) + ;
"{CTRL+PgUp} to navigate down to the next test class (.PRG)" + ;
CHR(13) + CHR(13) + ;
"{CTRL+PgDn} to navigate up to the previous test class (.PRG)" + ;
CHR(13) + CHR(13) + ;
"{CTRL+S} to toggle the grid size"

IF VERSION(5)&gt;=900
*
*    1 = Top Absolute
*    2 = Left Absolute
*  128 = Right Relative
*   64 = Bottom Relative
*
THIS.Anchor = 1 + 2 + 128 + 64
ENDIF



ENDPROC
PROCEDURE Resize
IF NOT VERSION(5)&gt;= 900
RETURN
ENDIF

THIS.Column2.Width = ;
THIS.Width - THIS.Column1.Width - SYSMETRIC(5) - 14
ENDPROC
PROCEDURE RightClick
IF THISFORM.ShortcutMenuGrid()
ACTIVATE POPUP pShortCut
ENDIF

ENDPROC
PROCEDURE Valid
*
*  see THIS.When and THISFORM.KeyPress
*
THISFORM.KeyPreview = .f.
ENDPROC
PROCEDURE When
*
*  When THISFORM.KeyPreview is set to .F., the preferred
*  default behavior for performance reasons,
*  set THISFORM.KeyPreview to .T. ONLY when this grid
*  is the active control (see also THIS.Valid).
*
*  This code is here to support a workaround for
*  an ugly intrinsic behavior when:
*    1- THIS.AllowCellSelection = .F.
*    2- The total widths of all the columns exactly
*       fill the available horizontal space inside
*       the grid, no pixels between the last/rightmost
*       column and the vertical scrollbar
*    3- THIS grid has focus
*    4- The user presses the {RightArrow} key
*  whereupon the grid contents scrolls to the left,
*  leaving an empty space on the right.
*  This behavior is similar to the workarounds in
*  this class for an implicit and ugly leftward
*  scrolling in other situations, fixed by the
*  DoScroll(6) calls in this class.
*
THISFORM.KeyPreview = .t.

*
*  ...and to support the {CTRL+PgUp} and {CTRL+PgDn}
*  hotkeys...
*


ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3SK</uniqueid>
		<timestamp>818108498</timestamp>
		<class>header</class>
		<classloc/>
		<baseclass>header</baseclass>
		<objname>Header1</objname>
		<parent>frmfoxunit.grdTests.Column1</parent>
		<properties>FontBold = .F.
FontName = "Tahoma"
Caption = " Test Class (.PRG)"
Name = "Header1"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3SL</uniqueid>
		<timestamp>818167602</timestamp>
		<class>textbox</class>
		<classloc/>
		<baseclass>textbox</baseclass>
		<objname>Text1</objname>
		<parent>frmfoxunit.grdTests.Column1</parent>
		<properties>FontBold = .F.
FontName = "Tahoma"
BorderStyle = 0
ControlSource = "tresult.tclass"
Margin = 0
ReadOnly = .T.
ForeColor = 0,0,0
BackColor = 255,255,255
Name = "Text1"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3SN</uniqueid>
		<timestamp>818108498</timestamp>
		<class>header</class>
		<classloc/>
		<baseclass>header</baseclass>
		<objname>Header1</objname>
		<parent>frmfoxunit.grdTests.Column2</parent>
		<properties>FontBold = .F.
FontName = "Tahoma"
Caption = " Test name (method of...)"
Name = "Header1"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3SP</uniqueid>
		<timestamp>818167602</timestamp>
		<class>textbox</class>
		<classloc/>
		<baseclass>textbox</baseclass>
		<objname>Text1</objname>
		<parent>frmfoxunit.grdTests.Column2</parent>
		<properties>FontBold = .F.
FontName = "Tahoma"
BorderStyle = 0
ControlSource = "tresult.tname"
Margin = 0
ReadOnly = .T.
ForeColor = 0,0,0
BackColor = 255,255,255
Name = "Text1"
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3SQ</uniqueid>
		<timestamp>846118119</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdLoadNewTestClass</objname>
		<parent>frmfoxunit</parent>
		<properties>Top = 3
Left = 252
Height = 40
Width = 76
FontName = "Tahoma"
Picture = ("fxuclassload.bmp")
Caption = "\&lt;Load Class"
TabIndex = 5
TabStop = .F.
ToolTipText = "Load a test class (.PRG) that inherits from FxuTestCase that is not already in the list"
SpecialEffect = 2
Name = "cmdLoadNewTestClass"
</properties>
		<protected/>
		<methods>PROCEDURE Click
THISFORM.ioResultData.LoadTestCaseClass()

THISFORM.AfterRunTests()

THISFORM.Refresh()

ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3ST</uniqueid>
		<timestamp>846118119</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdRunTestsAll</objname>
		<parent>frmfoxunit</parent>
		<properties>Top = 3
Left = 4
Height = 40
Width = 56
FontName = "Tahoma"
Picture = ("fxurunalltests.bmp")
Caption = "\&lt;All"
TabIndex = 1
TabStop = .F.
ToolTipText = "Run ALL the tests in the list"
SpecialEffect = 2
Name = "cmdRunTestsAll"
</properties>
		<protected/>
		<methods>PROCEDURE Click
THISFORM.RunAllTests()
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3SV</uniqueid>
		<timestamp>846118119</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdRunTestsOneClass</objname>
		<parent>frmfoxunit</parent>
		<properties>Top = 3
Left = 60
Height = 40
Width = 56
FontName = "Tahoma"
Picture = ("fxurunclasstests.bmp")
Caption = "\&lt;Class"
TabIndex = 2
TabStop = .F.
ToolTipText = "Run all the tests in the currently-selected Test Class (.PRG)"
SpecialEffect = 2
Name = "cmdRunTestsOneClass"
</properties>
		<protected/>
		<methods>PROCEDURE Click
THISFORM.RunClassTests(EVALUATE(THISFORM.icGridRS+".TClass"))
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3SZ</uniqueid>
		<timestamp>846149165</timestamp>
		<class>cprogressbar</class>
		<classloc>cprogres.vcx</classloc>
		<baseclass>container</baseclass>
		<objname>pbProgress</objname>
		<parent>frmfoxunit</parent>
		<properties>Top = 448
Left = 20
Width = 680
Height = 24
TabIndex = 18
Name = "pbProgress"
shpBar.BackColor = 0,255,0
shpBar.Name = "shpBar"
lblPercent.Name = "lblPercent"
</properties>
		<protected/>
		<methods>PROCEDURE Init
LPARAMETERS tnMin, tnMax, tlCenter

IF NOT DODEFAULT(tnMin, tnMax, tlCenter)
RETURN .F.
ENDIF

IF VERSION(5)&gt;=900
*
*    4 = Bottom Absolute
*    2 = Left Absolute
*    8 = Right Absolute
*
THIS.Anchor = 4 + 2 + 8
ENDIF
ENDPROC
PROCEDURE lblPercent.Init
IF NOT DODEFAULT()
RETURN .F.
ENDIF

IF VERSION(5)&gt;=900
THIS.Anchor = THIS.Parent.Anchor
ENDIF
ENDPROC
PROCEDURE shpBar.Init
IF NOT DODEFAULT()
RETURN .F.
ENDIF

IF VERSION(5)&gt;=900
THIS.Anchor = THIS.Parent.Anchor
ENDIF
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3T4</uniqueid>
		<timestamp>846118119</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdReloadSelectedTestClass</objname>
		<parent>frmfoxunit</parent>
		<properties>Top = 3
Left = 512
Height = 40
Width = 104
FontName = "Tahoma"
Picture = ("fxuclassreload.bmp")
Caption = "Rel\&lt;oad Selected"
TabIndex = 8
TabStop = .F.
ToolTipText = "Re-load (refresh) the FoxUnit results table records for the Test Class (.PRG) containing the currently-selected Test"
SpecialEffect = 2
Name = "cmdReloadSelectedTestClass"
</properties>
		<protected/>
		<methods>PROCEDURE Click
THISFORM.ioResultData.ReloadTestCaseClass( ;
EVALUATE(THISFORM.icGridRS+".TCLass") ;
)

THISFORM.AfterRunTests()

THISFORM.Refresh()

ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3T6</uniqueid>
		<timestamp>846149165</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdRemoveTestClass</objname>
		<parent>frmfoxunit</parent>
		<properties>Top = 3
Left = 408
Height = 40
Width = 104
Picture = ("fxuclassremove.bmp")
Caption = "\&lt;Remove Selected"
TabIndex = 7
TabStop = .F.
ToolTipText = "See THIS.Init()"
SpecialEffect = 2
Name = "cmdRemoveTestClass"
</properties>
		<protected/>
		<methods>PROCEDURE Click
IF this.Caption = "\&lt;Remove All"
	
	IF MESSAGEBOX("Remove all test classes?", 4+48+256, "Remove all test classes?") = 7
	*  get focus off this button
	  KEYBOARD "{TAB}" PLAIN CLEAR
	  RETURN
	ENDIF
	
	thisform.ioREsultData.RemoveAllTestCaseClasses()
	
else

	IF MESSAGEBOX("Remove the entire .PRG/Class containing the currently-selected " + ;
	              ALLTRIM(EVALUATE(THISFORM.icGridRS+".TName")) + " test?", ;
	              4+48+256,"Remove this .PRG?") = 7
	  *  get focus off this button
	  KEYBOARD "{TAB}" PLAIN CLEAR
	  RETURN
	ENDIF

	THISFORM.ioResultData.RemoveTestCaseClass(EVALUATE(THISFORM.icGridRS+".TClass"))
	
ENDIF

*THISFORM.grdTests.Refresh()
THISFORM.AfterRunTests()

ENDPROC
PROCEDURE Init
THIS.ToolTipText = ;
"Remove the  entire Test Class (.PRG) containing " + ;
"the currently-selected Test" + ;
CHR(13) + CHR(13) + ;
"Note that the Test Class (.PRG) is NOT deleted " + ;
"from disk; rather just its entries in the FoxUnit " + ;
"results table in the list below are deleted."

ENDPROC
PROCEDURE MouseEnter
LPARAMETERS nButton, nShift, nXCoord, nYCoord

IF nShift = 1
	this.Caption = "\&lt;Remove All"
ENDIF
ENDPROC
PROCEDURE MouseLeave
LPARAMETERS nButton, nShift, nXCoord, nYCoord

this.Caption = "\&lt;Remove Selected"
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3T9</uniqueid>
		<timestamp>846118119</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdCreateNewTestClass</objname>
		<parent>frmfoxunit</parent>
		<properties>Top = 3
Left = 176
Height = 40
Width = 76
FontName = "Tahoma"
Picture = ("fxuclasscreate.bmp")
Caption = "\&lt;New Class"
TabIndex = 4
TabStop = .F.
ToolTipText = "Create a new test class (.PRG) that inherits from FxuTestCase"
SpecialEffect = 2
Name = "cmdCreateNewTestClass"
</properties>
		<protected/>
		<methods>PROCEDURE Click
LOCAL lcNewClassPRG
lcNewClassPRG = SPACE(0)

*
*  MODIFY COMMAND FXUResultData
*    XXDTES("FXURESULTDATA.PRG","FUNCTION CreateNewTestCaseClass(tcTestsPath,tcTestClassPRG)    ")
*

THISFORM.ioResultData.CreateNewTestCaseClass( ;
ADDBS(JUSTPATH(FULLPATH(DBF(THISFORM.icGridRS)))), ;
@m.lcNewClassPRG ;
)

THISFORM.AfterRunTests()

THISFORM.Refresh()


ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3TB</uniqueid>
		<timestamp>846118119</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdRunTestsOne</objname>
		<parent>frmfoxunit</parent>
		<properties>Top = 3
Left = 116
Height = 40
Width = 56
FontName = "Tahoma"
Picture = ("fxurunsingletest.bmp")
Caption = "\&lt;Selected"
TabIndex = 3
TabStop = .F.
ToolTipText = "Run only the currently-selected Test"
SpecialEffect = 2
Name = "cmdRunTestsOne"
</properties>
		<protected/>
		<methods>PROCEDURE Click
THISFORM.RunOneTest( ;
ALLTRIM(EVALUATE(THISFORM.icGridRS+".TClass")), ;
ALLTRIM(EVALUATE(THISFORM.icGridRS+".TName")) ;
)

ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3TE</uniqueid>
		<timestamp>846149165</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>lblTestsRunTestsFailed</objname>
		<parent>frmfoxunit</parent>
		<properties>AutoSize = .T.
FontName = "Tahoma"
BackStyle = 0
Caption = "Test results"
Height = 16
Left = 24
Top = 432
Width = 66
TabIndex = 15
Name = "lblTestsRunTestsFailed"
</properties>
		<protected/>
		<methods>PROCEDURE Init
IF NOT DODEFAULT()
RETURN .F.
ENDIF

IF VERSION(5)&gt;=900
*
*    4 = Bottom Absolute
*    2 = Left Absolute
*
THIS.Anchor = 4 + 2
ENDIF

THIS.Caption = SPACE(0)
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3TI</uniqueid>
		<timestamp>846118119</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdAddNewTest</objname>
		<parent>frmfoxunit</parent>
		<properties>Top = 3
Left = 328
Height = 40
Width = 76
FontName = "Tahoma"
Picture = ("fxuclassaddtestto.bmp")
Caption = "Add \&lt;Test"
TabIndex = 6
TabStop = .F.
ToolTipText = "Add a new test (method) to the test class (.PRG) currently selected in the grid."
SpecialEffect = 2
Name = "cmdAddNewTest"
</properties>
		<protected/>
		<methods>PROCEDURE Click
THISFORM.ioResultData.AddNewTest( ;
ALLTRIM(EVALUATE(THISFORM.icGridRS+".TClass")), ;
THISFORM ;
)

*
*  no THISFORM.Refresh() here, because AddNewTest()
*  calls the EDITSOURCE() function, which doesn't
*  pause program execution the way MODIFY COMMAND
*  does
*
*  rather, FXUResultData::AddNewTest() sets a custom
*  THISFORM.ilReloadCurrentClassOnActivate flag property
*  that is checked in THISFORM.Activate
*




ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3TL</uniqueid>
		<timestamp>846149165</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>lblElapsedTime</objname>
		<parent>frmfoxunit</parent>
		<properties>FontName = "Tahoma"
BackStyle = 0
Caption = "Elapsed Time:"
Height = 18
Left = 360
Top = 432
Visible = .F.
Width = 84
TabIndex = 16
Name = "lblElapsedTime"
</properties>
		<protected/>
		<methods>PROCEDURE Init
IF NOT DODEFAULT()
RETURN .F.
ENDIF

IF VERSION(5)&gt;=900
*
*    4 = Bottom Absolute
*    2 = Left Absolute
*
THIS.Anchor = 4 + 2
ENDIF
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3TN</uniqueid>
		<timestamp>846149165</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>lblTimeElapsed</objname>
		<parent>frmfoxunit</parent>
		<properties>FontName = "Tahoma"
BackStyle = 0
Caption = ""
Height = 18
Left = 440
Top = 432
Width = 114
TabIndex = 17
Name = "lblTimeElapsed"
</properties>
		<protected/>
		<methods>PROCEDURE Init
IF NOT DODEFAULT()
RETURN .F.
ENDIF

IF VERSION(5)&gt;=900
*
*    4 = Bottom Absolute
*    2 = Left Absolute
*
THIS.Anchor = 4 + 2
ENDIF

THIS.Caption = SPACE(0)
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3TP</uniqueid>
		<timestamp>846118119</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdModifySelected</objname>
		<parent>frmfoxunit</parent>
		<properties>Top = 3
Left = 616
Height = 40
Width = 104
FontName = "Tahoma"
Picture = ("fxuclassmodify.bmp")
Caption = "\&lt;Modify Selected"
TabIndex = 9
TabStop = .F.
ToolTipText = "Modify the currently-selected test (method)"
SpecialEffect = 2
Name = "cmdModifySelected"
</properties>
		<protected/>
		<methods>PROCEDURE Click
THISFORM.ioResultData.ModifyExistingTest( ;
ALLTRIM(EVALUATE(THISFORM.icGridRS+".TClass")), ;
ALLTRIM(EVALUATE(THISFORM.icGridRS+".TName")), ;
THISFORM ;
)

*
*  no THISFORM.Refresh() here, because ModifyTest()
*  calls the EDITSOURCE() function, which doesn't
*  pause program execution the way MODIFY COMMAND
*  does
*
*  rather, FXUResultData::ModifyTest() sets a custom
*  THISFORM.ilReloadCurrentClassOnActivate flag property
*  that is checked in THISFORM.Activate
*




ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1930NO3S7</uniqueid>
		<timestamp>846149165</timestamp>
		<class>shape</class>
		<classloc/>
		<baseclass>shape</baseclass>
		<objname>shpSeparator1</objname>
		<parent>frmfoxunit</parent>
		<properties>Top = 8
Left = 173
Height = 28
Width = 2
SpecialEffect = 0
Name = "shpSeparator1"
</properties>
		<protected/>
		<methods>PROCEDURE Init
IF NOT DODEFAULT()
RETURN .F.
ENDIF

THIS.Top = 1
THIS.Height = 44
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1940I8IFW</uniqueid>
		<timestamp>846149165</timestamp>
		<class>shape</class>
		<classloc/>
		<baseclass>shape</baseclass>
		<objname>shpSeparator2</objname>
		<parent>frmfoxunit</parent>
		<properties>Top = 8
Left = 405
Height = 28
Width = 2
SpecialEffect = 0
Name = "shpSeparator2"
</properties>
		<protected/>
		<methods>PROCEDURE Init
IF NOT DODEFAULT()
RETURN .F.
ENDIF

THIS.Top = 1
THIS.Height = 44
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>846118119</timestamp>
		<class>textbox</class>
		<classloc/>
		<baseclass>textbox</baseclass>
		<objname>txtClassFilter</objname>
		<parent>frmfoxunit</parent>
		<properties>ControlSource = "THISFORM.icClassFilter"
Height = 23
Left = 364
TabIndex = 20
Top = 50
Width = 108
Name = "txtClassFilter"
</properties>
		<protected/>
		<methods>PROCEDURE GotFocus
THIS.AddProperty("icValueOnGotFocus",THIS.Value)

ENDPROC
PROCEDURE Init
THIS.InputMask = REPLICATE("X",60)
THIS.ToolTipText = THISFORM.GetFilterToolTipText()
ENDPROC
PROCEDURE LostFocus
IF UPPER(ALLTRIM(THIS.icValueOnGotFocus)) == UPPER(ALLTRIM(THIS.Value))
*
*  no change/update
*
ELSE
THISFORM.ApplyFilter()
ENDIF

ENDPROC
PROCEDURE RightClick
THISFORM.RightClick()
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1970QSK9X</uniqueid>
		<timestamp>846118119</timestamp>
		<class>textbox</class>
		<classloc/>
		<baseclass>textbox</baseclass>
		<objname>txtNameFilter</objname>
		<parent>frmfoxunit</parent>
		<properties>ControlSource = "THISFORM.icNameFilter"
Height = 23
Left = 520
TabIndex = 21
Top = 50
Width = 108
Name = "txtNameFilter"
</properties>
		<protected/>
		<methods>PROCEDURE GotFocus
THIS.AddProperty("icValueOnGotFocus",THIS.Value)

ENDPROC
PROCEDURE Init
THIS.InputMask = REPLICATE("X",60)
THIS.ToolTipText = THISFORM.GetFilterToolTipText()
ENDPROC
PROCEDURE LostFocus
IF UPPER(ALLTRIM(THIS.icValueOnGotFocus)) == UPPER(ALLTRIM(THIS.Value))
*
*  no change/update
*
ELSE
THISFORM.ApplyFilter()
ENDIF

ENDPROC
PROCEDURE RightClick
THISFORM.RightClick()
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>846149165</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>lblClassFilter</objname>
		<parent>frmfoxunit</parent>
		<properties>Alignment = 1
BackStyle = 0
Caption = "Class"
Height = 17
Left = 316
Top = 54
Width = 44
TabIndex = 12
Name = "lblClassFilter"
</properties>
		<protected/>
		<methods>PROCEDURE Init
THIS.ToolTipText = THISFORM.GetFilterToolTipText()
ENDPROC
PROCEDURE RightClick
THISFORM.RightClick()
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1970SIAKD</uniqueid>
		<timestamp>846149165</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>lblNameFilter</objname>
		<parent>frmfoxunit</parent>
		<properties>Alignment = 1
BackStyle = 0
Caption = "Name"
Height = 17
Left = 476
Top = 54
Width = 40
TabIndex = 14
Name = "lblNameFilter"
</properties>
		<protected/>
		<methods>PROCEDURE Init
THIS.ToolTipText = THISFORM.GetFilterToolTipText()
ENDPROC
PROCEDURE RightClick
THISFORM.RightClick()
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1970ZP794</uniqueid>
		<timestamp>846118119</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdClearFilter</objname>
		<parent>frmfoxunit</parent>
		<properties>Top = 50
Left = 636
Height = 23
Width = 84
Caption = "Clear filter"
TabIndex = 22
Name = "cmdClearFilter"
</properties>
		<protected/>
		<methods>PROCEDURE Click
THIS.Parent.txtClassFilter.Value = SPACE(0)
THIS.Parent.txtNameFilter.Value = SPACE(0)
THISFORM.ApplyFilter()


ENDPROC
PROCEDURE Init
THIS.ToolTipText = THISFORM.GetFilterToolTipText()
ENDPROC
PROCEDURE Refresh
THIS.Enabled = NOT EMPTY(FILTER(THISFORM.icGridRS))

ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_1970ZZ6QB</uniqueid>
		<timestamp>846149165</timestamp>
		<class>label</class>
		<classloc/>
		<baseclass>label</baseclass>
		<objname>lblFilterInfo</objname>
		<parent>frmfoxunit</parent>
		<properties>FontSize = 8
WordWrap = .T.
BackStyle = 0
Caption = "Filter the list to include Classes, Names containing these strings: "
Height = 17
Left = 8
Top = 55
Width = 312
TabIndex = 13
Name = "lblFilterInfo"
</properties>
		<protected/>
		<methods>PROCEDURE Init
THIS.ToolTipText = THISFORM.GetFilterToolTipText()
ENDPROC
PROCEDURE RightClick
THISFORM.RightClick()
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>COMMENT</platform>
		<uniqueid>RESERVED</uniqueid>
		<timestamp>0</timestamp>
		<class/>
		<classloc/>
		<baseclass/>
		<objname>frmfoxunit</objname>
		<parent/>
		<properties>Arial, 0, 9, 5, 15, 12, 32, 3, 0
Tahoma, 0, 9, 5, 14, 12, 23, 2, 0
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0XWNM5</uniqueid>
		<timestamp>846166179</timestamp>
		<class>form</class>
		<classloc/>
		<baseclass>form</baseclass>
		<objname>frmshowinfo</objname>
		<parent/>
		<properties>Height = 360
Width = 600
Desktop = .T.
ShowWindow = 1
DoCreate = .T.
AutoCenter = .T.
Caption = "Please Note"
MinButton = .F.
MinHeight = 180
MinWidth = 300
WindowType = 1
AllowOutput = .F.
_memberdata = 
Name = "frmshowinfo"
</properties>
		<protected/>
		<methods>PROCEDURE Destroy
*
*  a possible BINDEVENT() to this method
*  requires at least one line of code here
*
DODEFAULT()

LOCAL lcSetProc
lcSetProc = SET("PROCEDURE")
SET PROCEDURE TO FXU

LOCAL loFoxUnitForm
loFoxUnitForm = GetFoxUnitForm()
IF VARTYPE(m.loFoxUnitForm) = "O"
loFoxUnitForm.inZoomTop = THIS.Top
loFoxUnitForm.inZoomLeft = THIS.Left
loFoxUnitForm.inZoomHeight = THIS.Height
loFoxUnitForm.inZoomWidth = THIS.Width
loFoxUnitForm.inZoomWindowState = THIS.WindowState
ENDIF

SET PROCEDURE TO &amp;lcSetProc

ENDPROC
PROCEDURE Init
*
*  FXU.VCX/frmShowInfo::Init()
*
*
*  typically, pass tcText (REQUIRED) and then
*  EITHER toParameter OR one or more of the other parameters
*  -- if you pass toParameter, you might as well take
*  all the actions the individual parameters would
*
*
*
*  if toParameter is passed, it is assumed to have either
*    toParameter.icScriptCode
*  and if so, that block of code is executed via
*  EXECSCRIPT(), or
*    toParameter.iaCode
*  array of individual lines of code, and if so, each line
*  of code is executed here via macro expansion
*  ...or both...
*
*  toParameter.iaCode lines can use THIS, THIS.edtShowInfo,
*  etc.
*
*  toParameter.icScriptCode CANNOT use THIS, THIS.edtShowInfo,
*  etc., because the code executes as a standalone .FXP;
*  however, the script code can accept ONE optional toForm
*  parameter, an object reference to THISFORM
*
*  since THISFORM is modal, you can also update anything
*  you want from the calling code, after instantiating
*  THISFORM and before Show()ing it
*
LPARAMETERS tcText, ;
toParameter, ;
		    tcCaption, ;   &amp;&amp;&amp; "Please Note"
		    tnTop, ;       &amp;&amp;&amp; AutoCenter/move upward 1/4
		    tnLeft, ;      &amp;&amp;&amp; AutoCenter
		    tnHeight, ;    &amp;&amp;&amp; based on LENC(tcText), _Screen size
		    tnWidth, ;     &amp;&amp;&amp; based on LENC(teText), _Screen size
		    tcFontName, ;  &amp;&amp;&amp; editbox
		    tnFontSize,;   &amp;&amp;&amp; editbox
		    tlFontBold, ;  &amp;&amp;&amp; editbox
		    tlFontItalic, ;   &amp;&amp;&amp; editbox
		    tnDataSessionID, ;
		    tlNoImage

IF NOT DODEFAULT()
RETURN .F.
ENDIF

IF PCOUNT() = 0 OR NOT VARTYPE(tcText) = "C"
ASSERT .f. message PROGRAM() + ;
" has not been passed the required tcText parameter"
THIS.Destroy()
RETURN .f.
ENDIF

IF FILE("FoxUnit.ICO")
THIS.Icon = "FoxUnit.ICO"
EXTERNAL FILE FoxUnit.ICO
ENDIF

LOCAL lcCode, llError, laJunk[1], lcFontName, lnFontSize, ;
llFontBold, llFontItalic, ;
lnTextHeight, lnTextWidth, lnEditboxHeight

THIS.AddProperty("DesignedMargin",THIS.edtShowInfo.Left)
THIS.AddProperty("DesignedOKButtonBottomMargin",THIS.Height-THIS.cmdOK.Top-THIS.cmdOK.Height)

IF VARTYPE(tcFontName) = "C" ;
AND NOT EMPTY(tcFontName) ;
AND AFONT(laJunk,tcFontName)
THIS.edtShowInfo.FontName = tcFontName
ENDIF
lcFontName = THIS.edtShowInfo.FontName
IF VARTYPE(tnFontSize) = "N"
lnFontSize = tnFontSize
ELSE
lnFontSize = THIS.edtShowInfo.FontSize
ENDIF
IF VARTYPE(tlFontBold) = "L"
llFontBold = tlFontBold
ELSE
llFontBold = THIS.edtShowInfo.FontBold
ENDIF
IF VARTYPE(tlFontItalic) = "L"
llFontItalic = tlFontItalic
ELSE
llFontItalic = THIS.edtShowInfo.FontItalic
ENDIF
lnEditboxHeight = THIS.edtShowInfo.Height

RELEASE laJunk
DIMENSION laJunk[1]
IF AFONT(laJunk,lcFontName,lnFontSize)
THIS.edtShowInfo.FontSize = lnFontSize
THIS.edtShowInfo.FontBold = llFontBold
THIS.edtShowInfo.FontItalic = llFontItalic
ENDIF
IF THIS.edtShowInfo.Height &gt; lnEditboxHeight
*
*  THIS.edtShowInfo.IntegralHeight = .t.
*
THIS.Height = THIS.Height + (lnEditboxHeight-THIS.edtShowInfo.Height)
THIS.cmdOK.Top = THIS.Height-THIS.DesignedOKButtonBottomMargin - THIS.cmdOK.Height
ENDIF

*
*  in the Designer, THIS.Height = 360 and THIS.Width = 600,
*  Height is 60% of Width
*
*  establish default Top/Height
THIS.AutoCenter = .t.
THIS.Top = (_Screen.Height-THIS.Height)/4
*
*  store information about how this form is designed,
*  for use in dynamic resizing, etc.
*
THIS.AddProperty("DesignedTop",THIS.Top)
THIS.AddProperty("DesignedLeft",THIS.Left)
THIS.AddProperty("DesignedHeight",THIS.Height)
THIS.AddProperty("DesignedWidth",THIS.Width)

IF VARTYPE(toParameter) = "O" ;
AND VARTYPE(toParameter.icScriptCode) = "C" ;
AND NOT EMPTY(toParameter.icScriptCode)
llError = .f.
TRY
EXECSCRIPT(toParameter.icScriptCode,THIS)
CATCH
llError = .t.
ENDTRY
IF llError
*
*  maybe your script doesn't accept the THIS
*  parameter
*
llError = .f.
TRY
EXECSCRIPT(toParameter.icScriptCode)
CATCH
llError = .t.
ENDTRY
ENDIF
ENDIF

IF VARTYPE(toParameter) = "O" ;
AND VARTYPE(toParameter.iaCode[1]) = "C" ;
AND NOT EMPTY(toParameter.iaCode[1])
FOR EACH lcCode IN toParameter.iaCode
TRY
&amp;lcCode
CATCH
ENDTRY
ENDFOR
ENDIF

IF VARTYPE(tcCaption) = "C" AND NOT EMPTY(tcCaption)
tcCaption = STRTRAN(tcCaption, "\&lt;", "")
THIS.Caption = tcCaption
ENDIF

IF VARTYPE(tnTop) = "N" AND tnTop &gt;= 0
THIS.Top = tnTop
ENDIF
IF VARTYPE(tnLeft) = "N" AND tnLeft &gt;=0
THIS.Left = tnLeft
ENDIF
IF VARTYPE(tnHeight) = "N"
IF tnHeight &gt;= THIS.MinHeight
THIS.Height = tnHeight
ELSE
THIS.Height = THIS.MinHeight
ENDIF
ENDIF
IF VARTYPE(tnWidth) = "N"
IF tnWidth &gt;= THIS.MinWidth
THIS.Width = tnWidth
ELSE
THIS.Width = THIS.MinWidth
ENDIF
ENDIF

*
*  tcText can be passed as
*  - a string
*  - a filename (SomeFile.TXT)
*  - an Alias.FieldName, when the tnDataSessionID
*    is passed
*
IF VARTYPE(tnDataSessionID) = "N" AND NOT tnDataSessionID=SET("DATASESSION")
THIS.DataSessionID = tnDataSessionID
ENDIF

DO CASE
CASE FILE(tcText)
*
*  filename
*
THIS.edtShowInfo.Value = FILETOSTR(tcText)
CASE OCCURS(".",tcText)=1 AND INLIST(TYPE(tcText),"M","C")
*
*  Alias.FieldName
*
THIS.edtShowInfo.Value = EVALUATE(tcText)
OTHERWISE
*
*  string
*
THIS.edtShowInfo.Value = tcText
ENDCASE

THIS.FontName = THIS.edtShowInfo.FontName
THIS.FontSize = THIS.edtShowInfo.FontSize
THIS.FontBold = THIS.edtShowInfo.FontBold
THIS.FontItalic = THIS.edtShowInfo.FontItalic

THIS.Resize()
IF THIS.Top = THIS.DesignedTop AND THIS.Left = THIS.DesignedLeft
THIS.AutoCenter = .t.
THIS.Top = (_Screen.Height-THIS.Height)/4
THIS.DesignedTop = THIS.Top
THIS.DesignedLeft = THIS.Left
ENDIF



ENDPROC
PROCEDURE Load
SET TALK OFF
ENDPROC
PROCEDURE printinfo
LOCAL lcSetProc
lcSetProc = SET("PROCEDURE")
*
*  MODIFY COMM FXU
*
SET PROCEDURE TO FXU.PRG ADDITIVE

*!*	CREATEOBJECT("sesTextBlockReport", ;
*!*	             THIS.edtShowInfo.Text, ;
*!*	             THIS.Caption, ;
*!*	             THIS.edtShowInfo.FontName, ;
*!*	             THIS.edtShowInfo.FontSize, ;
*!*	             THIS.edtShowInfo.FontBold, ;
*!*	             THIS.edtShowInfo.FontItalic)
CREATEOBJECT("sesTextBlockReport", ;
THIS.edtShowInfo.Text, ;
THIS.Caption, ;
"Tahoma", ;
9)

SET PROCEDURE TO &amp;lcSetProc

ENDPROC
PROCEDURE Resize
THIS.edtShowInfo.Move(THIS.DesignedMargin, ;
THIS.DesignedMargin, ;
THIS.Width-(THIS.DesignedMargin*2), ;
THIS.Height-(THIS.DesignedMargin*2)-THIS.cmdOK.Height)

THIS.cmdOK.Move(THIS.Width-THIS.cmdOK.Width-THIS.DesignedMargin, ;
THIS.Height-THIS.cmdOK.Height-THIS.DesignedOKButtonBottomMargin, ;
THIS.cmdOK.Width, ;
THIS.cmdOK.Height)

THIS.cmdPrint.Move(THIS.cmdOK.Left - THIS.DesignedMargin - THIS.cmdPrint.Width, ;
THIS.cmdOK.Top, ;
THIS.cmdPrint.Width, ;
THIS.cmdPrint.Height)

IF THIS.edtShowInfo.Top + THIS.edtShowInfo.Height &gt; ;
THIS.cmdOK.Top - 4
*
*  because THIS.edtShowInfo.IntegralHeight is set to .T.,
*  the editbox may overlap or crowd the buttons too much
*  -- this code sets THIS.edtShowInfo.Height to the next
*  smaller size respecting THIS.edtShowInfo.IntegralHeight
*
LOCAL lnHeight, lnNewHeight
lnHeight = THIS.edtShowInfo.Height
lnNewHeight = THIS.edtShowInfo.Height-1
DO WHILE .t.
lnHeight = THIS.edtShowInfo.Height
THIS.edtShowInfo.IntegralHeight = .f.
THIS.edtShowInfo.Height = lnNewHeight
THIS.edtShowInfo.IntegralHeight = .t.
IF THIS.edtShowInfo.Height = lnNewHeight ;
OR THIS.edtShowInfo.Height &lt; lnHeight
EXIT
ENDIF
lnNewHeight = lnNewHeight - 1
ENDDO
ENDIF




ENDPROC
PROCEDURE RightClick
DEFINE POPUP pShortcut SHORTCUT RELATIVE FROM MROW(),MCOL()

DEFINE BAR 1 OF pShortcut PROMPT "Font..."
ON SELECTION BAR 1 OF pShortcut _Screen.ActiveForm.SetFont()

DEFINE BAR 2 OF pShortcut PROMPT "Print..."
ON SELECTION BAR 2 OF pShortcut _Screen.ActiveForm.PrintInfo()

ACTIVATE POPUP pShortcut
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1>Class</reserved1>
		<reserved2>4</reserved2>
		<reserved3>_memberdata XML Metadata for customizable properties
*printinfo 
</reserved3>
		<reserved4/>
		<reserved5/>
		<reserved6>Pixels</reserved6>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_11D0Z07LD</uniqueid>
		<timestamp>818185955</timestamp>
		<class>editbox</class>
		<classloc/>
		<baseclass>editbox</baseclass>
		<objname>edtShowInfo</objname>
		<parent>frmshowinfo</parent>
		<properties>Height = 293
Left = 16
ReadOnly = .T.
TabIndex = 2
Top = 16
Width = 569
DisabledBackColor = 255,255,255
IntegralHeight = .T.
Name = "edtShowInfo"
</properties>
		<protected/>
		<methods>PROCEDURE RightClick
THISFORM.RightClick()
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_RBT0V74R7</uniqueid>
		<timestamp>818184000</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdOK</objname>
		<parent>frmshowinfo</parent>
		<properties>Top = 320
Left = 484
Height = 27
Cancel = .T.
Caption = "\&lt;OK"
Default = .T.
TabIndex = 1
Name = "cmdOK"
</properties>
		<protected/>
		<methods>PROCEDURE Click
THISFORM.Release()
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>WINDOWS</platform>
		<uniqueid>_RBT0V74R7</uniqueid>
		<timestamp>818184000</timestamp>
		<class>commandbutton</class>
		<classloc/>
		<baseclass>commandbutton</baseclass>
		<objname>cmdPrint</objname>
		<parent>frmshowinfo</parent>
		<properties>Top = 320
Left = 376
Height = 27
Caption = "\&lt;Print..."
TabIndex = 4
Name = "cmdPrint"
</properties>
		<protected/>
		<methods>PROCEDURE Click
THISFORM.PrintInfo()
ENDPROC
</methods>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
	<record>
		<platform>COMMENT</platform>
		<uniqueid>RESERVED</uniqueid>
		<timestamp>0</timestamp>
		<class/>
		<classloc/>
		<baseclass/>
		<objname>frmshowinfo</objname>
		<parent/>
		<properties>Arial, 0, 9, 5, 15, 12, 32, 3, 0
</properties>
		<protected/>
		<methods/>
		<objcode/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
	</record>
</VFPData>
